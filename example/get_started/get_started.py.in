# $Id$
#  --------------------------------------------------------------------------
# dismod_at: Estimating Disease Rates as Functions of Age and Time
#           Copyright (C) 2014-15 University of Washington
#              (Bradley M. Bell bradbell@uw.edu)
#
# This program is distributed under the terms of the
# 	     GNU Affero General Public License version 3.0 or later
# see http://www.gnu.org/licenses/agpl.txt
# ---------------------------------------------------------------------------
# $begin get_started.py$$ $newlinech #$$
# $spell
#	dismod
# $$
#
# $section Getting Started Using dismod_at$$
#
# $code
# $verbatim%
#	example/get_started/get_started.py.in
#	%0%# BEGIN PYTHON%# END PYTHON%1%$$
# $$
# $end
# ---------------------------------------------------------------------------
# BEGIN PYTHON
import sys
sys.path.append('@CMAKE_SOURCE_DIR@/python')
import dismod_at
import copy
import subprocess
# ---------------------------------------------------------------------------
def constant_weight_fun(a, t) :
	return 1.0
def gaussian_zero_fun(a, t) :
	# note that the a, t values are not used
	return ('prior_mean_zero', 'prior_mean_zero', 'prior_mean_zero')
def uniform_positive_fun(a, t) :
	# note that the a, t values are not used
	return ('prior_uniform_positive', 'prior_mean_zero', 'prior_mean_zero')
# ------------------------------------------------------------------------
# name of the database
file_name   = 'example.db'
#
# age table
age_list    = [    0.0, 50.0,    100.0 ]
#
# time table
time_list   = [ 1995.0, 2005.0, 2015.0 ]
#
# integrand table
integrand_list = [
	{ 'name':'prevalence',  'eta':1e-6 },
	{ 'name':'incidence',   'eta':1e-6 },
	{ 'name':'remission',   'eta':1e-6 },
	{ 'name':'mtexcess',    'eta':1e-6 },
	{ 'name':'mtother',     'eta':1e-6 }
]
#
# node table: world -> north_america
#             north_america -> (united_states, canada)
node_list = [
	{ 'name':'world',         'parent':'' },
	{ 'name':'north_america', 'parent':'world' },
	{ 'name':'united_states', 'parent':'north_america' },
	{ 'name':'canada',        'parent':'north_america' }
]
#
# weight table: The constant function 1.0 (one age and one time point)
fun = constant_weight_fun
weight_list = [
	{ 'name':'constant',  'age_id':[1], 'time_id':[1], 'fun':fun }
]
#
# covariate table: no covriates
covariate_list = list()
#
# mulcov table
mulcov_list = list()
# --------------------------------------------------------------------------
# data table: same order as list of integrands
data_list = list()
# values that are the same for all data rows
row = {
	'node':        'world',
	'density':     'gaussian',
	'weight':      'constant',
	'time_lower':   2000.0,
	'time_upper':   2000.0,
	'age_lower':    0.0
}
# values that change between rows: (one data point for each integrand)
for data_id in range( len(integrand_list) ) :
	meas_value        = 1e-2 * (data_id + 1)
	meas_std          = 0.2 * meas_value
	integrand         = integrand_list[data_id]['name']
	row['meas_value'] = meas_value
	row['meas_std']   = meas_std
	row['integrand']  = integrand
	if integrand == 'prevalence' :
		# prevalence is measured at age zero
		row['age_upper'] = 0.0
	else :
		# other integrands are averaged from age zero to one hundred
		row['age_upper'] = 100.0
	data_list.append( copy.copy(row) )
# --------------------------------------------------------------------------
# prior_table
prior_list = [
	{   # prior_zero
		'name':     'prior_zero',
		'density':  'uniform',
		'lower':    0.0,
		'upper':    0.0,
		'mean':     0.0,
		'std':      None,
		'eta':      None
	},{ # prior_one
		'name':     'prior_one',
		'density':  'uniform',
		'lower':    1.0,
		'upper':    1.0,
		'mean':     1.0,
		'std':      None,
		'eta':      None
	},{ # prior_uniform_positive
		'name':     'prior_uniform_positive',
		'density':  'uniform',
		'lower':    1e-4,
		'upper':    None,
		'mean':     1e-1,
		'std':      None,
		'eta':      None
	},{ # prior_mean_zero
		'name':     'prior_mean_zero',
		'density':  'gaussian',
		'lower':    None,
		'upper':    None,
		'mean':     0.0,
		'std':      1e-2,
		'eta':      None
	}
]
# --------------------------------------------------------------------------
# smooth table
middle_age_id  = 1
last_time_id   = 2
smooth_list = [
	{   # smooth_mean_zero
		'name':          'smooth_mean_zero',
		'age_id':        [ middle_age_id ],
		'time_id':       [ 0, last_time_id ],
		'mulstd_value':  'prior_one',
		'mulstd_dage':   'prior_one',
		'mulstd_dtime':  'prior_one',
		'fun':           gaussian_zero_fun
	},{ # smooth_uniform_positive
		'name':          'smooth_uniform_positive',
		'age_id':        [ middle_age_id ],
		'time_id':       [ 0, last_time_id ],
		'mulstd_value':  'prior_one',
		'mulstd_dage':   'prior_one',
		'mulstd_dtime':  'prior_one',
		'fun':           uniform_positive_fun
	}
]
# --------------------------------------------------------------------------
# rate table
rate_list = [
	{
		'name':          'pini',
		'parent_smooth': 'smooth_uniform_positive',
		'child_smooth':  'smooth_mean_zero'
	},{
		'name':          'iota',
		'parent_smooth': 'smooth_uniform_positive',
		'child_smooth':  'smooth_mean_zero'
	},{
		'name':          'rho',
		'parent_smooth': 'smooth_uniform_positive',
		'child_smooth':  'smooth_mean_zero'
	},{
		'name':          'chi',
		'parent_smooth': 'smooth_uniform_positive',
		'child_smooth':  'smooth_mean_zero'
	},{
		'name':          'omega',
		'parent_smooth': 'smooth_uniform_positive',
		'child_smooth':  'smooth_mean_zero'
	}
]
# --------------------------------------------------------------------------
# create database
dismod_at.create_database(
	file_name,
	age_list,
	time_list,
	integrand_list,
	node_list,
	weight_list,
	covariate_list,
	data_list,
	prior_list,
	smooth_list,
	rate_list,
	mulcov_list
)
# -----------------------------------------------------------------------
program        = '@CMAKE_BINARY_DIR@/devel/dismod_at'
command        = 'fit'
fit_list= {
	'file_name':        file_name,
	'parent_node_id':   '0',
	'n_age_ode':        '6',
	'n_time_ode':       '2',
	'ode_step_size':    '20.0',
	'tolerance':        '1e-8',
	'max_num_iter':     '100'
}
cmd       = [
	program                     ,
	command                     ,
	fit_list['file_name']       ,
	fit_list['parent_node_id']  ,
	fit_list['n_age_ode']       ,
	fit_list['n_time_ode']      ,
	fit_list['ode_step_size']   ,
	fit_list['tolerance']       ,
	fit_list['max_num_iter']
]
print( ' '.join(cmd) )
flag = subprocess.call( cmd )
if flag != 0 :
	sys.exit('The dismod_at fit command failed')
# -----------------------------------------------------------------------
# read tables
new             = False
connection      = dismod_at.create_connection(file_name, new)
node_dict       = dismod_at.get_table_dict(connection, 'node')
smooth_dict     = dismod_at.get_table_dict(connection, 'smooth')
mulcov_dict     = dismod_at.get_table_dict(connection, 'mulcov')
rate_dict       = dismod_at.get_table_dict(connection, 'rate')
fit_arg_dict    = dismod_at.get_table_dict(connection, 'fit_arg')
fit_result_dict = dismod_at.get_table_dict(connection, 'fit_result')
# -----------------------------------------------------------------------
# check fit_arg table
for row in fit_arg_dict :
	fit_arg_name  = row['fit_arg_name']
	fit_arg_value = row['fit_arg_value']
	assert fit_list[fit_arg_name] == fit_arg_value
# -----------------------------------------------------------------------
# create pack_object
n_integrand    = len( integrand_list )
parent_node_id = int( fit_list['parent_node_id'] )
#
pack_object = dismod_at.pack_info(
	n_integrand,
	parent_node_id,
	node_dict,
	smooth_dict,
	mulcov_dict,
	rate_dict
)
# -----------------------------------------------------------------------
# check fit_result table
#
n_child   = pack_object.n_child()
check_tol = 1e-3
n_rate    = n_integrand
n_data    = n_integrand
#
assert len(fit_result_dict) == pack_object.size()
#
# get variable values
fit_result_value = []
for row in fit_result_dict :
	fit_result_value.append( row['fit_result_value'] )
#
for rate_id in range( n_rate ) :
	integrand_id = rate_id
	data_id      = rate_id
	meas_value   = data_list[ integrand_id ]['meas_value']
	for child_id in range(n_child + 1) :
		info   = pack_object.rate_info(rate_id, child_id)
		offset = info['offset']
		n_var  = info['n_var']
		for i in range(n_var) :
			if child_id == n_child :
				err = fit_result_value[offset + i] / meas_value - 1.0
			else :
				err = fit_result_value[offset + i] / meas_value
			assert abs(err) <= check_tol
# -----------------------------------------------------------------------
print('get_started: OK')
# END PYTHON
