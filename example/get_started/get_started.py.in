# $Id$
#  --------------------------------------------------------------------------
# dismod_at: Estimating Disease Rates as Functions of Age and Time
#           Copyright (C) 2014-15 University of Washington
#              (Bradley M. Bell bradbell@uw.edu)
#
# This program is distributed under the terms of the
# 	     GNU Affero General Public License version 3.0 or later
# see http://www.gnu.org/licenses/agpl.txt
# ---------------------------------------------------------------------------
# $begin get_started.py$$ $newlinech #$$
#
# $section Getting Started$$
#
# $index get_started, example$$
# $index example, get_started$$
#
# $code
# $verbatim%example/get_started.py%0%# BEGIN PYTHON%# END PYTHON%1%$$
# $$
# $end
# BEGIN PYTHON
#
import sys
sys.path.append('@CMAKE_SOURCE_DIR@/python')
import dismod_at
import copy
def constant_weight_fun(a, t) :
	return 1.0
def gaussian_zero_fun(a, t) :
	# note that the a, t values are not used
	return ('gaussian_zero', 'gaussian_zero', 'gaussian_zero')
def uniform_positive_fun(a, t) :
	# note that the a, t values are not used
	return ('uniform_positive', 'uniform_positive', 'uniform_positive')
#
# ------------------------------------------------------------------------
# name of the database
file_name   = 'example.db'
#
# age table
age_list    = [ 0.0, 20.0, 40.0, 60.0, 80.0, 100.0 ]
#
# time table
time_list   = [ 1995.0, 2005.0, 2015.0 ]
#
# integrand table
integrand_list = [
	{ 'name':'incidence',   'eta':1e-6 },
	{ 'name':'remission',   'eta':1e-6 },
	{ 'name':'mtexcess',    'eta':1e-6 },
	{ 'name':'mtother',     'eta':1e-6 },
	{ 'name':'prevalence',  'eta':1e-6 }
]
#
# node table
node_list = [
	{ 'name':'world',         'parent':'' },
	{ 'name':'north_america', 'parent':'world' },
	{ 'name':'united_states', 'parent':'north_america' },
	{ 'name':'canada',        'parent':'north_america' }
]
#
# weight table
fun = constant_weight_fun
weight_list = [
	{ 'name':'constant',  'age_id':[0], 'time_id':[0], 'fun':fun }
]
#
# covariate table
covariate_list = list()
#
# data table
data_list = list()
row = {
	'node':'world',
	'density':'gaussian',
	'weight':'constant',
	'time_lower':1995.0,
	'time_upper':1995.0
}
for data_id in range( len(integrand_list) ) :
	meas_value = 1e-2 * (data_id + 1)
	meas_std   = 0.2 * meas_value
	integrand  = integrand_list[data_id]['name']
	row['meas_value'] = meas_value
	row['meas_std']   = meas_std
	row['integrand']  = integrand
	if integrand == 'prevalence' :
		row['age_lower'] = 0.0
		row['age_upper'] = 0.0
	else :
		row['age_lower'] = 0.0
		row['age_upper'] = 100.0
	data_list.append( copy.copy(row) )
#
# prior_table
prior_list = [
	{	'name':'zero',
		'density':'uniform',
		'lower':0.0,
		'upper':0.0,
		'mean':0.0,
		'std':None,
		'eta':None
	},{	'name':'one',
		'density':'uniform',
		'lower':1.0,
		'upper':1.0,
		'mean':1.0,
		'std':None,
		'eta':None
	},{	'name':'uniform_positive',
		'density':'uniform',
		'lower':1e-4,
		'upper':float('inf'),
		'mean':1e-1,
		'std':None,
		'eta':None
	},{	'name':'gaussian_zero',
		'density':'gaussian',
		'lower':None,
		'upper':None,
		'mean':0.0,
		'std':1e-2,
		'eta':None
	}
]
#
# smooth table
middle_age  = int( (len(age_list) + 1) / 2 )
middle_time = int( (len(time_list) + 1) / 2 )
smooth_list = [
	{	'name':'gaussian_zero',
		'age_id':[ middle_age ],
		'time_id':[ middle_time ],
		'mulstd_value':'one',
		'mulstd_dage':'one',
		'mulstd_dtime':'one',
		'fun':gaussian_zero_fun
	},{	'name':'uniform_positive',
		'age_id':[ middle_age ],
		'time_id':[ middle_time ],
		'mulstd_value':'one',
		'mulstd_dage':'one',
		'mulstd_dtime':'one',
		'fun':uniform_positive_fun
	}
]
#
# rate table
rate_list = [
	{
		'name':'pini',
		'parent_smooth':'uniform_positive',
		'child_smooth':'gaussian_zero'
	},{
		'name':'iota',
		'parent_smooth':'uniform_positive',
		'child_smooth':'gaussian_zero'
	},{
		'name':'rho',
		'parent_smooth':'uniform_positive',
		'child_smooth':'gaussian_zero'
	},{
		'name':'chi',
		'parent_smooth':'uniform_positive',
		'child_smooth':'gaussian_zero'
	},{
		'name':'omega',
		'parent_smooth':'uniform_positive',
		'child_smooth':'gaussian_zero'
	}
]
#
# mulcov table
mulcov_list = []
#
# create database
dismod_at.create_database(
	file_name,
	age_list,
	time_list,
	integrand_list,
	node_list,
	weight_list,
	covariate_list,
	data_list,
	prior_list,
	smooth_list,
	rate_list,
	mulcov_list
)
# -----------------------------------------------------------------------
print('get_started: OK')
# END PYTHON
