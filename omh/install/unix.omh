$Id:$
-----------------------------------------------------------------------------
dismod_at: Estimating Disease Rates as Functions of Age and Time
          Copyright (C) 2014-18 University of Washington
             (Bradley M. Bell bradbell@uw.edu)

This program is distributed under the terms of the
	     GNU Affero General Public License version 3.0 or later
see http://www.gnu.org/licenses/agpl.txt
-----------------------------------------------------------------------------
$begin install_unix$$
$dollar @$$
$spell
	grep
	https://github.com/bradbell/dismod_at.git
	ls
	metis
	py
	suitesparse
	tgz
	pkgconfig
	cppad
	make make
	dismod
	cmake
	CppAD
	Ipopt
	config
	eigen
	tarball
	xzf
	gsl
	sqlite
	devel
	numpy
	txt
	dev
	libipopt
$$

$section Installing dismod_at in Unix$$

$children%bin/run_cmake.sh
	%bin/example_install.sh
%$$

$head System Requirements$$
The following programs are required by dismod_at
and should have standard system installs:

$subhead C++ Compiler$$
The $code dismod_at$$ program can be compiled by any C++98 compliant compiler;
e.g., $code g++$$.
(Note that a C++11 compiler would be better.)

$subhead Fortran Compiler$$
A fortran compiler is required by $code ipopt$$ which in turn
is required by $code dismod_at$$.

$subhead git$$
The $href%https://git-scm.com/%git%$$ program,
a source code version control system,
is required by $code dismod_at$$.

$subhead cmake$$
The $href%http://www.cmake.org/%cmake%$$ program,
which installs other programs,
is required by $code dismod_at$$.

$subhead pkg-config$$
The $href%http://www.freedesktop.org/wiki/Software/pkg-config/%pkg-config%$$
program must be installed.

$subhead python3$$
The $href%http://www.python.org/%python3%$$,
programming language.
Note may need to install some standard python packages; e.g.,
$code numpy$$.

$subhead sqlite3$$
The $href%href%http://sqlite.org/%sqlite3%$$ library,
version 3.7.11 (released on 2012-03-20) or higher; see
$href%http://www.sqlite.org/changes.html%sqlite releases%$$.
Note that the development headers are required; e.g.,
on Fedora or Red-Hat one needs to install $code sqlite-devel$$.

$subhead gsl$$
$href%http://gnuwin32.sourceforge.net/packages/gsl.htm%gsl%$$,
the gnu scientific library.
Note that the development headers are required; e.g.,
on Fedora or Red-Hat one needs to install $code gsl-devel$$.

$subhead suitesparse$$
The $href%http://faculty.cse.tamu.edu/davis/suitesparse.html%suitesparse%$$
sparse matrix package.
Note that the development headers are required; e.g.,
on Fedora or Red-Hat one needs to install $code suitesparse-devel$$.

$head Download dismod_at.git$$
After installing the requirements above,
use the following command to get the current version of dismod_at:
$codei%
	git clone https://github.com/bradbell/dismod_at.git dismod_at.git
	cd dismod_at.git
%$$
You can determine the $icode git_hash$$ and version number
corresponding to this checkout of the master branch using the commands:
$codei%
	git show-ref | grep 'refs/heads/master'
	grep '^SET(dismod_at_version' CMakeLists.txt
%$$
You can checkout an old version corresponding to a specific $icode git_hash$$,
and check its version number, using the commands:
$codei%
	git checkout -q %git_hash%
	grep '^SET(dismod_at_version' CMakeLists.txt
%$$

$head Paths$$
This discussion is intended to help with the install of the
special requirements and dismod_at (see below).

$subhead Adding to a Path$$
The instructions below may require you to add to a $icode path_name$$.
Use the command
$codei%
	echo @%path_name%
%$$
to see if your initial path is empty. If it is empty,
use the command
$codei%
	export %path_name%=%directory%
%$$
to add $icode directory$$ to the path.
If it is non-empty, use
$codei%
	export %path_name%="@%path_name%:%directory%"
%$$
to add $icode directory$$ to the path.

$subhead PKG_CONFIG_PATH$$
After $code sqlite3$$ and $code gsl$$ are installed
the following commands should work:
$codep%
	pkg-config sqlite3 --libs
	pkg-config gsl     --libs
%$$
If one of them fails, a corresponding directory is missing
from the $code PKG_CONFIG_PATH$$ environment variable.
If $icode prefix$$ is the prefix where $code gsl$$ was installed,
the command
$codei%
	find -L %prefix% -name gsl.pc 2> /dev/null
%$$
should find the directory where $code gsl.pc$$ is located.
After $code ipopt$$ is installed (see below),
the following command should work:
$codep%
	pkg-config ipopt --libs
%$$
If it fails,
the command
$codei%
	find -L %ipopt_prefix% -name ipopt.pc 2> /dev/null
%$$
should find the directory where $code ipopt.pc$$ is located;
see $cref/ipopt_prefix/run_cmake.sh/ipopt_prefix/$$.

$subhead LD_LIBRARY_PATH$$
After $code ipopt$$ is installed,
the directory where it's libraries are installed should be in your
$code LD_LIBRARY_PATH$$.
If you get an error finding loading the shared library corresponding
to ipopt, use the following command to find it:
$codei%
	find -L %ipopt_prefix% -name 'libipopt.*' 2> /dev/null
%$$
see $cref/ipopt_prefix/run_cmake.sh/ipopt_prefix/$$.

$subhead PATH$$
After you install dismod_at (see below)
you should be able to execute the command
$codei%
	dismod_at
%$$
from any directory.
If you get the error $code dismod_at: command not found$$,
you will need to add the binary install directory to you path.
Use the following command to find it:
$codei%
	find -L %dismod_at_prefix% -name dismod_at 2> /dev/null
%$$
see $cref/dismod_at_prefix/run_cmake.sh/dismod_at_prefix/$$.

$subhead PYTHONPATH$$
After you install dismod_at
you should be able to execute the following commands:
$codei%
	%python3%
	import dismod_at
	quit()
%$$
where $icode python3$$ is your
$cref/python3 executable/run_cmake.sh/python3_executable/$$.
If you get the error $code No module named 'dismod_at'$$,
you will need to add the directory where the module is installed
to your python path.
Use the following command to find it:
$codei%
	find -L %dismod_at_prefix% -name site-packages 2> /dev/null
%$$

$head Special Requirements$$
The packages listed below are required by dismod_at
and may not have standard system installs

$subhead run_cmake.sh$$
The settings in $cref%bin/run_cmake.sh%run_cmake.sh%$$
are used by the
scripts that install the special requirements. You must first change
these settings to the appropriate values for your system before
running these scripts.

$subhead eigen$$
The $href%http://eigen.tuxfamily.org%eigen%$$
linear algebra package.
Starting in the $code dismod_at.git$$ directory, the command
$codei%
	bin/install_eigen.sh
%$$
can be used to install this package.

$subhead ipopt$$
The $href%https://projects.coin-or.org/Ipopt%Ipopt%$$
optimization package.
Starting in the $code dismod_at.git$$ directory, the command
$codei%
	bin/install_ipopt.sh
%$$
can be used to install this package.

$subhead CppAD$$
The $href%http://www.coin-or.org/CppAD/%cppad%$$
C++ algorithmic differentiation package.
Starting in the $code dismod_at.git$$ directory, the command
$codei%
	bin/install_cppad.sh
%$$
can be used to install this package.

$subhead cppad_mixed$$
The $href%https://bradbell.github.io/cppad_mixed%cppad_mixed%$$
C++ random effects modeling package.
Starting in the $code dismod_at.git$$ directory, the command
$codei%
	bin/install_cppad_mixed.sh
%$$
can be used to install this package.

$head dismod_at$$
The steps above should only need to be executed once, not for
each new version of $code dismod_at$$
(unless the $cref whats_new_2018$$ release notes say otherwise).
The steps below will need to be executed each time you install
a new version of $code dismod_at$$:

$subhead Setup$$
The file $cref%bin/run_cmake.sh%run_cmake.sh%$$ has setting that
you should change so they correspond to your machine.

$subhead Cmake Command$$
After changing $code bin/run_cmake.sh$$ to work for your system,
in the $code dismod_at.git$$ directory
execute the following command:
$codep
	bin/run_cmake.sh
$$

$subhead Build$$
The following command is option and will just build the
executable program $code build/devel/dismod_at$$:
$codep
	cd build
	make
	cd ..
$$

$subhead Test$$
The following commands are optional and will,
build the dismod_at executable,
build the examples and tests,
and run the examples, correctness tests, and speed tests:
$codep
	cd build
	make check
	make speed
	cd ..
$$
Some of the tests use different random number simulations each time
they are run.
If you get a correctness check failure during a $code make check$$
or $code make speed$$, try running the make command again.
If you get the same correctness check fails twice in a row,
there probably is a problem and
you should get help from the $code dismod_at$$ development team.

$subhead Install$$
The following command will,
build the dismod_at library and executable if necessary,
and install dismod_at:
$codep
	cd build
	make install
	cd ..
$$


$head Example$$
The file $cref example_install.sh$$ contains an example
install of $code dismod_at$$.
The section $cref get_started$$ contains a list of examples and tests
of using $code dismod_at$$.
These tests are run as part of the $code make check$$ command above.

$end
