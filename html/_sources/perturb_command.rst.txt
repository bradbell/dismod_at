.. _perturb_command-name:

!!!!!!!!!!!!!!!
perturb_command
!!!!!!!!!!!!!!!

xrst input file: ``python/dismod_at/perturb_command.py``

.. meta::
   :keywords: perturb_command, perturb, command:, random, change, to, start, or, scale, tables

.. index:: perturb_command, perturb, command:, random, change, to, start, or, scale, tables

.. _perturb_command-title:

Perturb Command: Random Change to Start or Scale Tables
#######################################################

.. meta::
   :keywords: syntax

.. index:: syntax

.. _perturb_command@Syntax:

Syntax
******

.. meta::
   :keywords: as, program

.. index:: as, program

.. _perturb_command@Syntax@As Program:

As Program
==========
``dismodat.py`` *database* ``perturb`` *tbl_name* *sigma*

.. meta::
   :keywords: as, python, function

.. index:: as, python, function

.. _perturb_command@Syntax@As Python Function:

As Python Function
==================
``dismod_at.perturb_command`` ( *database* , *tbl_name* , *sigma* )

.. meta::
   :keywords: database

.. index:: database

.. _perturb_command@database:

database
********
is the path from the currently directory to the database.
This must be a :ref:`dismod_at<database-name>` and
the :ref:`init_command-name` must have been run on the database.

.. meta::
   :keywords: tbl_name

.. index:: tbl_name

.. _perturb_command@tbl_name:

tbl_name
********
This is the name of an input table that we are perturbing.
This must be one of the following choices:

.. meta::
   :keywords: scale_var

.. index:: scale_var

.. _perturb_command@tbl_name@scale_var:

scale_var
=========
In this case the :ref:`scale_var_table-name` is perturbed.
This can be useful when one starts near the solution where the
derivative of the objective may be small.

.. meta::
   :keywords: start_var

.. index:: start_var

.. _perturb_command@tbl_name@start_var:

start_var
=========
In this case the :ref:`start_var_table-name` is perturbed.
This can be useful when one wants to see if the starting point
has an effect on the solution.

.. meta::
   :keywords: sigma

.. index:: sigma

.. _perturb_command@sigma:

sigma
*****
We use *multiplier* for a randomly chose multiplier,
that is different for each table entry, and that has a log with
mean zero and standard deviation *sigma* .
The value chosen for each table entry is its original value
times the multiplier.
If this value is below (above) the lower (upper) limit
for the table entry the lower (upper) limit is chosen.

.. meta::
   :keywords: random, seed

.. index:: random, seed

.. _perturb_command@sigma@Random Seed:

Random Seed
===========
If the :ref:`option_table@random_seed` is non-zero,
it is used to seed the random number generator that is used.
Otherwise, the system clock is used to seed the random number generator.
