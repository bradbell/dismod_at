.. _user_bilevel_random.py-name:

!!!!!!!!!!!!!!!!!!!!!!
user_bilevel_random.py
!!!!!!!!!!!!!!!!!!!!!!

xrst input file: ``example/user/bilevel_random.py``

.. meta::
   :keywords: user_bilevel_random.py, example, fitting, with, two, levels, of, random, effects

.. index:: user_bilevel_random.py, example, fitting, with, two, levels, of, random, effects

.. _user_bilevel_random.py-title:

Example Fitting With Two Levels of Random Effects
#################################################

.. meta::
   :keywords: node, table

.. index:: node, table

.. _user_bilevel_random.py@Node Table:

Node Table
**********
The following is a diagram of the node tree for this example:
::

                  n1
            /-----/\-----\
          n11            n12
        /     \        /     \
      n111   n112    n121   n122

We refer to *n1* as the root node and
*n111* , *n112* , *n121* , *n122* as the leaf nodes.

.. meta::
   :keywords: problem, parameters

.. index:: problem, parameters

.. _user_bilevel_random.py@Problem Parameters:

Problem Parameters
******************
The following parameters, used in this example, can be changed:

.. literalinclude:: ../../example/user/bilevel_random.py
   :lines: 122-137
   :language: py

.. meta::
   :keywords: model, variables

.. index:: model, variables

.. _user_bilevel_random.py@Model Variables:

Model Variables
***************

.. meta::
   :keywords: n1

.. index:: n1

.. _user_bilevel_random.py@n1:

n1
**
The values of iota at node n1 at age 0 and age 100 are fixed effects.

.. meta::
   :keywords: n11,, n12

.. index:: n11,, n12

.. _user_bilevel_random.py@n11, n12:

n11, n12
********
There is a
:ref:`child rate effect<model_variables@Random Effects, u@Child Rate Effects>`
for nodes n11 and node n12.
This adjusts the value at node n1 to its value for n11 and n12.

.. meta::
   :keywords: n111,, n112,, n121,, 122

.. index:: n111,, n112,, n121,, 122

.. _user_bilevel_random.py@n111, n112, n121, 122:

n111, n112, n121, 122
*********************
There is a
:ref:`subgroup covariate multiplier<model_variables@Random Effects, u@Subgroup Covariate Multipliers>`
for nodes n111, n112, n121, and n122.
The effect (multiplier times covariate) for the target
nodes n111 and n112 adjusts the value at node n11 to the target node.
The effect for the target
nodes n121 and n122 adjusts the value at node n12 to the target node.

.. meta::
   :keywords: subgroup, table

.. index:: subgroup, table

.. _user_bilevel_random.py@Subgroup Table:

Subgroup Table
**************
The subgroup table is used for the second level of random effects and
contains the following subgraph of the node graph:
::

          n11            n12
        /     \        /     \
      n111   n112    n121   n122

In addition, a special subgroup called ``none`` is
used for data points that correspond to nodes n1, n11, and n12; i.e.,
the parent node and the nodes at the first level.

.. meta::
   :keywords: mulcov, table

.. index:: mulcov, table

.. _user_bilevel_random.py@Mulcov Table:

Mulcov Table
************
There are two entries in the mulcov table.
The first (second) entry is for group n11 (n12) and corresponds to the
subgroup covariate multipliers for n111, n112 (n121, n122).

.. meta::
   :keywords: data, table

.. index:: data, table

.. _user_bilevel_random.py@Data Table:

Data Table
**********
If there was only data for the leaf nodes,
(n111, n112, n121, n122) there would be an ambiguity in the solution.
For example, we could shift the estimates for n111 and n112 by
:math:`+ \Delta` and the estimate for n11 by :math:`- \Delta`
and get the same fit to the data and prior
(because we are using a uniform of the priors).
For this reason, we have included data for n11, n12, and n1.
If you like, you can think of this data as prior information.

.. meta::
   :keywords: procedure

.. index:: procedure

.. _user_bilevel_random.py@Procedure:

Procedure
*********

.. meta::
   :keywords: fit, both

.. index:: fit, both

.. _user_bilevel_random.py@Procedure@Fit Both:

Fit Both
========
Create the database, initialize it, and fit both fixed and random effects.

.. meta::
   :keywords: compare, fit, and, truth

.. index:: compare, fit, and, truth

.. _user_bilevel_random.py@Procedure@Compare Fit and Truth:

Compare Fit and Truth
=====================
check the fit results and create the truth_var table.

.. meta::
   :keywords: sample, posterior, and, check, coverage

.. index:: sample, posterior, and, check, coverage

.. _user_bilevel_random.py@Procedure@Sample Posterior and Check Coverage:

Sample Posterior and Check Coverage
===================================
Sample from the posterior distribution and check for coverage.
Note that using two levels of random effects (instead of one)
should give a better value of the uncertainty of the model variables
(when there are two levels of random effects).

.. meta::
   :keywords: source, code

.. index:: source, code

.. _user_bilevel_random.py@Source Code:

Source Code
***********

.. literalinclude:: ../../example/user/bilevel_random.py
   :lines: 121-447
   :language: py
