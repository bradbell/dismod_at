.. _system_command_prc-name:

!!!!!!!!!!!!!!!!!!
system_command_prc
!!!!!!!!!!!!!!!!!!

xrst input file: ``python/dismod_at/system_command_prc.py``

.. meta::
   :keywords: system_command_prc, print, run, and, check, a, system, command

.. index:: system_command_prc, print, run, and, check, a, system, command

.. _system_command_prc-title:

Print Run and Check a System Command
####################################

.. meta::
   :keywords: syntax

.. index:: syntax

.. _system_command_prc@Syntax:

Syntax
******

.. literalinclude:: ../../python/dismod_at/system_command_prc.py
   :lines: 107-115
   :language: py

.. meta::
   :keywords: purpose

.. index:: purpose

.. _system_command_prc@Purpose:

Purpose
*******
This routine provides variations on the following steps:

#. Print the system command as it would appear in the shell; i.e.,
   with arguments separated by spaces.
#. Run the system command and wait for it to complete.
#. Check the integer value returned by the system command.
   If it is non-zero, an assert exception is raised with
   stderr as the message in the exception.
#. Return the contents of standard out as a python string.

.. meta::
   :keywords: command

.. index:: command

.. _system_command_prc@command:

command
*******
is a ``list`` with ``str`` elements. The first element is the
program to execute and the other elements are arguments to the program.

.. meta::
   :keywords: print_command

.. index:: print_command

.. _system_command_prc@print_command:

print_command
*************
If this argument is true (false) the command will (will not) be printed
before it is executed.

.. meta::
   :keywords: return_stdout

.. index:: return_stdout

.. _system_command_prc@return_stdout:

return_stdout
*************
If this argument is true, the command's standard output will be returned.
If this argument is false and *file_stdout* is not None,
standard error will be written to a file during the command execution.
Otherwise, standard output will be printed during the command execution.

.. meta::
   :keywords: return_stderr

.. index:: return_stderr

.. _system_command_prc@return_stderr:

return_stderr
*************
If this argument is true, the command's standard error will be returned.
If this argument is false and *file_stderr* is not None,
standard error will be written to a file during the command execution.
Otherwise, if an error occurs, an assertion is generated with
the commands standard error as the corresponding message.

.. meta::
   :keywords: file_stdout

.. index:: file_stdout

.. _system_command_prc@file_stdout:

file_stdout
***********
If *return_stdout* is true, this argument must be None.
If this argument is not None, it is a file object that is opened for writing
and standard output will be written to this file.

.. meta::
   :keywords: file_stderr

.. index:: file_stderr

.. _system_command_prc@file_stderr:

file_stderr
***********
If *return_stderr* is true, this argument must be None.
If this argument is not None, it is a file object that is opened for writing
and standard error will be written to this file.

.. meta::
   :keywords: write_command

.. index:: write_command

.. _system_command_prc@write_command:

write_command
*************
If *write_command* is true (false) the command will
(will not) be written to *file_stdout* .
If *file_stdout* is None, *write_command* must be false.

.. meta::
   :keywords: result

.. index:: result

.. _system_command_prc@result:

result
******

#. If *return_stdout* and *return stderr* are both false,
   *result* is ``None`` .
#. If *return_stdout* is true and *return_stderr* is false,
   *result* is a ``str`` with the contents of standard output.
#. If *return_stderr* is true and *return_stdout* is false,
   *result.stderr*
   is an ``str`` with the contents of standard error,
   and *result.returncode*
   is an ``int`` with the command's return code..
#. If both *return_stderr* and *return_stdout* are true,
   *result.stderr*
   is an ``str`` with the contents of standard error,
   *result.stdout*
   is an ``str`` with the contents of standard output,
   and *result.returncode*
   is an ``int`` with the command's return code..

.. meta::
   :keywords: example

.. index:: example

.. _system_command_prc@Example:

Example
*******
Many of the :ref:`user_example-name` examples use this utility.
