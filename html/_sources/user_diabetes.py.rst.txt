.. _user_diabetes.py-name:

!!!!!!!!!!!!!!!!
user_diabetes.py
!!!!!!!!!!!!!!!!

xrst input file: ``example/user/diabetes.py``

.. meta::
   :keywords: user_diabetes.py, an, example, /, speed, test, fitting, simulated, diabetes, data

.. index:: user_diabetes.py, an, example, /, speed, test, fitting, simulated, diabetes, data

.. _user_diabetes.py-title:

An Example / Speed Test Fitting Simulated Diabetes Data
#######################################################

.. meta::
   :keywords: running, this, example

.. index:: running, this, example

.. _user_diabetes.py@Running This example:

Running This example
********************
see :ref:`user_example@Run One Example` .
The time required to run the program will be printed at then end.

.. meta::
   :keywords: omega

.. index:: omega

.. _user_diabetes.py@omega:

omega
*****
The model rate :ref:`rate_table@rate_name@omega`
is constrained to have the value used during simulation of the data.

.. meta::
   :keywords: rho

.. index:: rho

.. _user_diabetes.py@rho:

rho
***
The model rate :ref:`rate_table@rate_name@rho`
is constrained to be zero.

.. meta::
   :keywords: covariates

.. index:: covariates

.. _user_diabetes.py@Covariates:

Covariates
**********

.. meta::
   :keywords: covariate, table

.. index:: covariate, table

.. _user_diabetes.py@Covariates@Covariate Table:

Covariate Table
===============
The covariate table has the following values:

.. csv-table::
    :widths: auto

    covariate_name,reference,max_difference
    sex,0,0.6
    bmi,28,null
    ms_2000,0,null

.. meta::
   :keywords: data, table

.. index:: data, table

.. _user_diabetes.py@Covariates@Data Table:

Data Table
==========
The :ref:`covariate<data_table@Covariates>` columns in the
data table have the following values:
*sex* is ``0.5`` for male and ``-0.5`` for female,
*bmi* is body mass index 20 <= *bmi*  <= 36 ,
*ms_2000* is ``1.0`` if this is year 2000 market scan data
and ``0.0`` otherwise.

.. meta::
   :keywords: multipliers

.. index:: multipliers

.. _user_diabetes.py@Covariates@Multipliers:

Multipliers
===========
There are three covariate multipliers, one for each covariate.
(In general, a covariate can have more than one multiplier.)
In addition, each covariate multiplier has one grid point; i.e.,
the multiplier is constant in age and time.
The value for each multiplier has a uniform distribution
with the lower and upper limits below:

.. csv-table::
    :widths: auto

    covariate,affected,lower,upper
    sex,iota,-2.0,+2.0
    bmi,iota,-0.1,+0.1
    ms_2000,prevalence,-1.0,+1.0

Note that the for sex and bmi these are
:ref:`mulcov_table@mulcov_type@rate_value` multipliers and
for ms_2000 it is a
:ref:`mulcov_table@mulcov_type@meas_value` multiplier.

.. meta::
   :keywords: truth, var, table

.. index:: truth, var, table

.. _user_diabetes.py@Truth Var Table:

Truth Var Table
***************
The values in the :ref:`truth_var_table-name` are generated using bilinear
interpolation of the log of values specified points.

.. meta::
   :keywords: parent, rates

.. index:: parent, rates

.. _user_diabetes.py@Truth Var Table@Parent Rates:

Parent Rates
============
We use the notation
as for age start,
ae for age end,
ts for time start, and
te for time end.
The following table gives the values used for the parent rates
(note that the parent rate for pini cannot change with age):

.. list-table::

    * - rate
      - (as,ts)
      - (as,te)
      - (ae,ts)
      - (ae,te)
    * - pini
      - .01
      - .01
      - .01
      - .01
    * - iota
      - .001
      - .002
      - .01
      - .02
    * - omega
      - .003
      - .002
      - .3
      - .2
    * - chi
      - .004
      - .002
      - .1
      - .05

.. meta::
   :keywords: child, rate, effects

.. index:: child, rate, effects

.. _user_diabetes.py@Truth Var Table@Child Rate Effects:

Child Rate Effects
==================
The child rate effects are in log space
(see :ref:`u_ik<avg_integrand@Rate Functions@Child Rate Effect, u_ik>` ),
constant in age and time,
positive for even index children, negative for odd indices, and have the
following values:

.. csv-table::
    :widths: auto

    rate,even index,odd index
    pini,.1,-.1
    iota,.15,-.15
    chi,.25,-.25

There is an exception for omega, which is constrained. It is defined
on the parent age grid and has the following values:

.. list-table::

    * - index
      - (as,ts)
      - (as,te)
      - (ae,ts)
      - (ae,te)
    * - even
      - .1
      - .02
      - .02
      - .03
    * - odd
      - -.1
      - -.02
      - -.02
      - -.03

.. meta::
   :keywords: predict, table

.. index:: predict, table

.. _user_diabetes.py@Predict Table:

Predict Table
*************
The :ref:`predict_command-name` is used to compute the
:ref:`predict_table@avg_integrand` corresponding to the
true values for the variables.
This is then used to create a version of the :ref:`data_table-name`
with no noise, and with a standard deviation that is modeled using
a coefficient of variation.

.. meta::
   :keywords: problem, parameters

.. index:: problem, parameters

.. _user_diabetes.py@Problem Parameters:

Problem Parameters
******************
The problem parameters below can (and should) be changed to experiment with
how they affect the results.

.. meta::
   :keywords: mulcov_dict

.. index:: mulcov_dict

.. _user_diabetes.py@Problem Parameters@mulcov_dict:

mulcov_dict
===========
This is a dictionary that maps each covariate name
to the true value for the corresponding covariate multiplier.
These values must satisfy the lower and upper
:ref:`multiplier<user_diabetes.py@Covariates@Multipliers>` limits above:

.. literalinclude:: ../../example/user/diabetes.py
   :lines: 183-183
   :language: py

.. meta::
   :keywords: node_list

.. index:: node_list

.. _user_diabetes.py@Problem Parameters@node_list:

node_list
=========
This is a ``list`` with ``str`` elements.
The first element of this list is the parent node,
the others are the child nodes. There must be an even number of children;
i.e., an odd number of elements in this list.
The case with no child nodes; i.e., one element in the list, is OK:

.. literalinclude:: ../../example/user/diabetes.py
   :lines: 196-196
   :language: py

.. meta::
   :keywords: integrand_list

.. index:: integrand_list

.. _user_diabetes.py@Problem Parameters@integrand_list:

integrand_list
==============
This is a ``list`` with ``str`` elements that are
:ref:`integrand names<integrand_table@integrand_name>`
that will have measurements in the :ref:`data_table-name`
and :ref:`data_sim_table-name` .
As mentioned above, the rates
:ref:`user_diabetes.py@omega`  and
:ref:`user_diabetes.py@rho`
are know during the estimation (fitting) process.
The integrands must inform the estimation of
the model rates for
:ref:`rate_table@rate_name@pini` ,
:ref:`rate_table@rate_name@iota` , and
:ref:`rate_table@rate_name@chi` .
Note that measuring prevalence at age zero should determine pini,
prevalence at other ages corresponds to integrals of iota, and
given prevalence, mtspecific should determine chi.

.. literalinclude:: ../../example/user/diabetes.py
   :lines: 220-223
   :language: py

.. meta::
   :keywords: parent_age_grid

.. index:: parent_age_grid

.. _user_diabetes.py@Problem Parameters@parent_age_grid:

parent_age_grid
===============
This specifies the age grid used for all the parent rate
:ref:`smoothings<rate_table@parent_smooth_id>` .
It is also the age grid used for constraining the child omega rates using
:ref:`rate_table@child_nslist_id` .
In addition, it is the set of ages in the :ref:`age_table-name` .
It is a ``dict`` with ``float`` values
(except for *number* which is a positive ``int`` ) containing
the start age, end age, number of age grid points, and
standard deviation of the log-Gaussian used to smooth the
:ref:`model_variables@Fixed Effects, theta@Parent Rates`
age differences.
(This does not include :ref:`rate_table@rate_name@pini`
because it only has one age point.)
The interval between age grid points is the end age, minus the start age,
divided by the number of grid points minus one.

.. literalinclude:: ../../example/user/diabetes.py
   :lines: 246-246
   :language: py

.. meta::
   :keywords: child_age_grid

.. index:: child_age_grid

.. _user_diabetes.py@Problem Parameters@child_age_grid:

child_age_grid
==============
The is the age grid used for all the child rate effect
:ref:`smoothings<rate_table@child_smooth_id>` except for
omega (see *parent_age_grid* above).
It is a ``dict`` with the following values:
The value of *index* is a list of indices (``int`` ) in the parent
age grid where there are
:ref:`random effects<model_variables@Random Effects, u>` .
Each of these indices must be less than *number* in the age grid.
The value *std* (a ``float`` ) is the standard deviation in the
Gaussian used to smooth the child rate effect values.
(This does not include :ref:`rate_table@rate_name@pini`
because it only has one age point.)

.. literalinclude:: ../../example/user/diabetes.py
   :lines: 266-266
   :language: py

.. meta::
   :keywords: parent_time_grid

.. index:: parent_time_grid

.. _user_diabetes.py@Problem Parameters@parent_time_grid:

parent_time_grid
================
This specifies the time grid used for all the parent rate
:ref:`smoothings<rate_table@parent_smooth_id>` .
It is also the time grid used for constraining the child omega rates using
:ref:`rate_table@child_nslist_id` .
In addition, it is the set of times in the :ref:`time_table-name` .
:ref:`rate_table@child_nslist_id` .
It is a ``dict`` with ``float`` values
(except for *number* which is a positive ``int`` ) containing
the start time, end time, number of time grid points, and
standard deviation of the log-Gaussian used to smooth the
:ref:`model_variables@Fixed Effects, theta@Parent Rates`
time differences.
(This includes :ref:`rate_table@rate_name@pini` ).
This is also the set of times in the :ref:`time_table-name` .
The interval between time grid points is the end time, minus the start time,
divided by the number of grid points minus one.

.. literalinclude:: ../../example/user/diabetes.py
   :lines: 290-290
   :language: py

.. meta::
   :keywords: child_time_grid

.. index:: child_time_grid

.. _user_diabetes.py@Problem Parameters@child_time_grid:

child_time_grid
===============
The is the time grid used for all the child rate effect
:ref:`smoothings<rate_table@child_smooth_id>` except for
omega (see *parent_time_grid* above).
It is a ``dict`` with the following values:
The value of *index* is a list of indices (``int`` ) in the parent
time grid where there are
:ref:`random effects<model_variables@Random Effects, u>` .
Each of these indices must be less than *number* in the time grid.
The value *std* (a ``float`` ) is the standard deviation in the
Gaussian used to smooth the child rate effect values.
(This includes :ref:`rate_table@rate_name@pini` ).

.. literalinclude:: ../../example/user/diabetes.py
   :lines: 309-309
   :language: py

.. meta::
   :keywords: ode_step_size

.. index:: ode_step_size

.. _user_diabetes.py@Problem Parameters@ode_step_size:

ode_step_size
=============
This is a ``str`` that specifies the
:ref:`option_table@Age Average Grid@ode_step_size` .
It is suggest that this value be less than the intervals in the
age and time grids:

.. literalinclude:: ../../example/user/diabetes.py
   :lines: 321-321
   :language: py

.. meta::
   :keywords: meas_cv

.. index:: meas_cv

.. _user_diabetes.py@Problem Parameters@meas_cv:

meas_cv
=======
This is a ``float`` that specifies the measurement standard deviations
:ref:`data_table@meas_std` by

    *meas_std* = *meas_cv* * *meas_value*

For this example, the data table column
:ref:`data_table@meas_value` does not have any noise; i.e.,
the values in that column are the corresponding
:ref:`average integrand<avg_integrand@Average Integrand, A_i>` .
The *meas_std* determines the noise level used by the
:ref:`simulate_command-name` :

.. literalinclude:: ../../example/user/diabetes.py
   :lines: 340-340
   :language: py

.. meta::
   :keywords: meas_repeat

.. index:: meas_repeat

.. _user_diabetes.py@Problem Parameters@meas_repeat:

meas_repeat
===========
This is a positive ``int`` that specifies
the number of times each noiseless measurement is repeated.
Note that the simulated measurements will be different, because
the noise for each measurement will be different.
There are *meas_repeat*
data points for each integrand in the integrand list,
each age in the age grid,
each time in the time grid,
each node in the node list.
In addition if an age is not the first age and time is not the first time,
there is a data point in the middle of the age-time interval that ends
at that (age, time):

.. literalinclude:: ../../example/user/diabetes.py
   :lines: 360-360
   :language: py

.. meta::
   :keywords: fit_with_noise_in_data

.. index:: fit_with_noise_in_data

.. _user_diabetes.py@Problem Parameters@fit_with_noise_in_data:

fit_with_noise_in_data
======================
This is a ``bool`` that specifies if measurement noise is included
when fitting the data; i.e., if the column
:ref:`data_sim_table@data_sim_value` is used to
fit the :ref:`model_variables-name` .
Otherwise, the measurements without noise
are used to fit the model variables; i.e., the column
:ref:`data_table@meas_value` :

.. literalinclude:: ../../example/user/diabetes.py
   :lines: 375-375
   :language: py

.. meta::
   :keywords: random_seed

.. index:: random_seed

.. _user_diabetes.py@Problem Parameters@random_seed:

random_seed
===========
This ``str`` must be a non-negative integer and is the
:ref:`option_table@random_seed` option value.
This is used to seed the random number generator used to simulate the
noise in the measurement values.
The affects the results of the fit when *fit_with_noise_in_data*
is true

.. literalinclude:: ../../example/user/diabetes.py
   :lines: 389-389
   :language: py

.. meta::
   :keywords: quasi_fixed

.. index:: quasi_fixed

.. _user_diabetes.py@Problem Parameters@quasi_fixed:

quasi_fixed
===========
This ``str`` that is either ``true`` or ``false`` and is the
:ref:`option_table@Optimize Fixed Only@quasi_fixed` option value.
If it is true, a quasi-Newton method is used.
This only requires function values and
first derivatives for the objective and constraints.
If it is false, a Newton method is used.
This requires second derivatives in which case initialization
and function evaluations take longer:

.. literalinclude:: ../../example/user/diabetes.py
   :lines: 405-405
   :language: py

.. meta::
   :keywords: tolerance_fixed

.. index:: tolerance_fixed

.. _user_diabetes.py@Problem Parameters@tolerance_fixed:

tolerance_fixed
===============
This ``str`` contains the
:ref:`tolerance_fixed<option_table@Optimize Fixed and Random@tolerance>` option value.

.. literalinclude:: ../../example/user/diabetes.py
   :lines: 415-415
   :language: py

.. meta::
   :keywords: derivative_test_fixed

.. index:: derivative_test_fixed

.. _user_diabetes.py@Problem Parameters@derivative_test_fixed:

derivative_test_fixed
=====================
This ``str`` is the
:ref:`option_table@Optimize Fixed and Random@derivative_test`
option for the fixed effects.
The choice ``trace-adaptive`` can be used to see if the partial
derivatives of the objective and constraints after the
:ref:`scaling<prior_table@eta@Scaling Fixed Effects>` of the fixed effects.
The choice ``none`` is normal for a working example.

.. literalinclude:: ../../example/user/diabetes.py
   :lines: 430-430
   :language: py

.. meta::
   :keywords: truth2start

.. index:: truth2start

.. _user_diabetes.py@Problem Parameters@truth2start:

truth2start
===========
This is a ``float`` that is used to map

    *start_var_value* = *truth2start* * *truth_var_value*

for each model variable that is not constrained to a specific value.
The notation
:ref:`truth_var_table@truth_var_value` is the true value
used to simulate the data and
:ref:`start_var_table@start_var_value` is the initial
value of the variable during the fit.
An error will result if the starting value for a variable is not within
the upper and lower limits for a variable.
The starting values are also used for the :ref:`scale_var_table-name` .
*truth2start* :

.. literalinclude:: ../../example/user/diabetes.py
   :lines: 452-452
   :language: py

.. meta::
   :keywords: accept_rel_err

.. index:: accept_rel_err

.. _user_diabetes.py@Problem Parameters@accept_rel_err:

accept_rel_err
==============
This is a ``float`` that specifies the absolute relative error
to be accepted as passing the test.
If the test passes, for each model variable

    *accept_rel_err* >= *fit_var_value* / *truth_var_value* ``- 1.0``

where
:ref:`truth_var_table@truth_var_value` is the true value
used to simulate the data and
:ref:`fit_var_table@fit_var_value` is result of the fit.
A python assertion is generated if the condition above is not satisfied.

.. literalinclude:: ../../example/user/diabetes.py
   :lines: 471-471
   :language: py

.. meta::
   :keywords: source, code

.. index:: source, code

.. _user_diabetes.py@Source Code:

Source Code
***********

.. literalinclude:: ../../example/user/diabetes.py
   :lines: 485-1237
   :language: py
