.. _user_sim_log.py-name:

!!!!!!!!!!!!!!!
user_sim_log.py
!!!!!!!!!!!!!!!

xrst input file: ``example/user/sim_log.py``

.. meta::
   :keywords: user_sim_log.py, simulating, data, with, log, transformed, distribution

.. index:: user_sim_log.py, simulating, data, with, log, transformed, distribution

.. _user_sim_log.py-title:

Simulating Data with Log Transformed Distribution
#################################################

.. meta::
   :keywords: see, also

.. index:: see, also

.. _user_sim_log.py@See Also:

See Also
********
:ref:`user_data_sim.py-name`

.. meta::
   :keywords: example, parameters

.. index:: example, parameters

.. _user_sim_log.py@Example Parameters:

Example Parameters
******************
The following values are used to simulate the data

.. literalinclude:: ../../example/user/sim_log.py
   :lines: 20-25
   :language: py

.. meta::
   :keywords: model

.. index:: model

.. _user_sim_log.py@Model:

Model
*****
The only non-zero model variable for this example is
the rate of incidence for the world which is constant in age and time.

.. meta::
   :keywords: data

.. index:: data

.. _user_sim_log.py@Data:

Data
****
There is only one data point for this example and it's integrand is
:ref:`avg_integrand@Integrand, I_i(a,t)@Sincidence` .
This data has a log transformed distribution with mean *iota_true* ,
offset *eta_global* , and standard deviation
*meas_std_global* .

.. meta::
   :keywords: covariate, multiplier

.. index:: covariate, multiplier

.. _user_sim_log.py@Covariate Multiplier:

Covariate Multiplier
********************
For this example there is one covariate multiplier.
It is a :ref:`mulcov_table@mulcov_type@meas_noise` multiplier
and the corresponding covariate value is one.

.. meta::
   :keywords: notation

.. index:: notation

.. _user_sim_log.py@Notation:

Notation
********

.. list-table::

    * - :math:`y`
      - is the measurement value, *meas_value_global*
    * - :math:`\mu`
      - mean of the data, *iota_true*
    * - :math:`\eta`
      - offset in log transform, *eta_global*
    * - :math:`\Delta`
      - data measurement error, *meas_std_global*
    * - :math:`\gamma`
      - meta regression error, *gamma_global*
    * - :math:`n`
      - number of simulated data values,
        :ref:`simulate_command@number_simulate`
    * - :math:`z_i`
      - *i*-th simulate data for :math:`i = 1, \ldots , n`

.. meta::
   :keywords: sigma

.. index:: sigma

.. _user_sim_log.py@sigma:

sigma
*****
The :ref:`transformed standard deviation<data_like@Notation@Transformed Standard Deviation, sigma_i>`
is given by

.. math::

 \sigma = \log( y + \eta + \Delta ) - \log(y + \eta)

.. literalinclude:: ../../example/user/sim_log.py
   :lines: 78-79
   :language: py

.. meta::
   :keywords: delta

.. index:: delta

.. _user_sim_log.py@delta:

delta
*****
For this example we use the
:ref:`data_like@Adjusted Standard Deviation, delta_i(theta)@add_std_scale_none`
option in the definition of the
:ref:`adjusted standard deviation<data_like@Adjusted Standard Deviation, delta_i(theta)>` :math:`\delta`; i.e.,

.. math::

 \delta = \sigma + \gamma

.. meta::
   :keywords: simulations

.. index:: simulations

.. _user_sim_log.py@Simulations:

Simulations
***********
The offset log transform of each simulated measurement :math:`z_i` has
the following Gaussian distribution:

.. math::

 \log( z_i + \eta ) - \log( \mu + \eta ) \sim N(0, \delta^2 )

.. meta::
   :keywords: source, code

.. index:: source, code

.. _user_sim_log.py@Source Code:

Source Code
***********

.. literalinclude:: ../../example/user/sim_log.py
   :lines: 113-344
   :language: py
