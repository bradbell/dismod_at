.. _install_unix-name:

!!!!!!!!!!!!
install_unix
!!!!!!!!!!!!

xrst input file: ``xrst/install/unix.xrst``

.. meta::
   :keywords: install_unix, installing, dismod_at, in, unix

.. index:: install_unix, installing, dismod_at, in, unix

.. _install_unix-title:

Installing dismod_at in Unix
############################

.. meta::
   :keywords: system, requirements

.. index:: system, requirements

.. _install_unix@System Requirements:

System Requirements
*******************
The following programs are required by dismod_at
and should have standard system installs:

.. meta::
   :keywords: c++, compiler

.. index:: c++, compiler

.. _install_unix@System Requirements@C++ Compiler:

C++ Compiler
============
The ``dismod_at`` program can be compiled by any C++98 compliant compiler;
e.g., ``g++`` .
(Note that a C++11 compiler would be better.)

.. meta::
   :keywords: fortran, compiler

.. index:: fortran, compiler

.. _install_unix@System Requirements@Fortran Compiler:

Fortran Compiler
================
A fortran compiler is required by ``ipopt`` which in turn
is required by ``dismod_at`` .

.. meta::
   :keywords: git

.. index:: git

.. _install_unix@System Requirements@git:

git
===
The `git <https://git-scm.com/>`_ program,
a source code version control system,
is required by ``dismod_at`` .

.. meta::
   :keywords: cmake

.. index:: cmake

.. _install_unix@System Requirements@cmake:

cmake
=====
The `cmake <http://www.cmake.org/>`_ program,
which installs other programs,
is required by ``dismod_at`` .

.. meta::
   :keywords: pkg-config

.. index:: pkg-config

.. _install_unix@System Requirements@pkg-config:

pkg-config
==========
The `pkg-config <http://www.freedesktop.org/wiki/Software/pkg-config/>`_
program must be installed.

.. meta::
   :keywords: python3

.. index:: python3

.. _install_unix@System Requirements@python3:

python3
=======
The `python3 <http://www.python.org/>`_,
programming language.
The packages listed in the
`standard library <https://docs.python.org/3/library/>`_
are assumed to be present.
You need to have the following additional python packages:
``numpy`` , ``matplotlib`` , ``scipy`` , ``build`` .

.. meta::
   :keywords: sqlite3

.. index:: sqlite3

.. _install_unix@System Requirements@sqlite3:

sqlite3
=======
The `http://sqlite.org/ <href>`_ library,
version 3.7.11 (released on 2012-03-20) or higher; see
`sqlite releases <http://www.sqlite.org/changes.html>`_.
Note that the development headers are required; e.g.,
on Fedora or Red-Hat one needs to install ``sqlite-devel`` .

.. meta::
   :keywords: gsl

.. index:: gsl

.. _install_unix@System Requirements@gsl:

gsl
===
`gsl <http://gnuwin32.sourceforge.net/packages/gsl.htm>`_,
the gnu scientific library.
Note that the development headers are required; e.g.,
on Fedora or Red-Hat one needs to install ``gsl-devel`` .

.. meta::
   :keywords: suitesparse

.. index:: suitesparse

.. _install_unix@System Requirements@suitesparse:

suitesparse
===========
The `suitesparse <http://faculty.cse.tamu.edu/davis/suitesparse.html>`_
sparse matrix package.
Note that the development headers are required; e.g.,
on Fedora or Red-Hat one needs to install ``suitesparse-devel`` .

.. meta::
   :keywords: download, dismod_at.git

.. index:: download, dismod_at.git

.. _install_unix@Download dismod_at.git:

Download dismod_at.git
**********************
After installing the requirements above,
use the following command to get the current version of dismod_at:

| |tab| ``git clone https://github.com/bradbell/dismod_at.git dismod_at.git``
| |tab| ``cd dismod_at.git``

You can determine the *git_hash* and version number
corresponding to this checkout of the master branch using the commands:

| |tab| ``git show-ref`` | ``grep`` ``'refs/heads/master'``
| |tab| ``grep`` '^ ``SET`` ( ``dismod_at_version`` ' ``CMakeLists.txt``

You can checkout an old version corresponding to a specific *git_hash* ,
and check its version number, using the commands:

| |tab| ``git checkout -q`` *git_hash*
| |tab| ``grep`` '^ ``SET`` ( ``dismod_at_version`` ' ``CMakeLists.txt``

.. meta::
   :keywords: paths

.. index:: paths

.. _install_unix@Paths:

Paths
*****
This discussion is intended to help with the install of the
special requirements and dismod_at (see below).

.. meta::
   :keywords: adding, to, a, path

.. index:: adding, to, a, path

.. _install_unix@Paths@Adding to a Path:

Adding to a Path
================
The instructions below may require you to add to a *path_name* .
Use the command

   ``echo $`` *path_name*

to see if your initial path is empty. If it is empty,
use the command

   ``export`` *path_name* = *directory*

to add *directory* to the path.
If it is non-empty, use

   ``export`` *path_name* =" ``$`` *path_name* : *directory* "

to add *directory* to the path.

.. meta::
   :keywords: pkg_config_path

.. index:: pkg_config_path

.. _install_unix@Paths@PKG_CONFIG_PATH:

PKG_CONFIG_PATH
===============
After ``sqlite3`` and ``gsl`` are installed
the following commands should work:
::

   pkg-config sqlite3 --modversion
   pkg-config gsl     --modversion

If one of them fails, a corresponding directory is missing
from the ``PKG_CONFIG_PATH`` environment variable.
If *prefix* is the prefix where ``gsl`` was installed,
the command

   ``find -L`` *prefix* ``-name gsl.pc 2> /dev/null``

should find the directory where ``gsl.pc`` is located.
After :ref:`install_unix@Special Requirements@cppad_mixed`
is installed (see below),
the following command should work:

   ``pkg-config`` *pkg* ``--modversion``

where *pkg* is any of the
:ref:`install_unix@Special Requirements`
below.
(There is one exception, the eigen package uses ``eigen3`` for
*pkg* above.)
If one of these commands fails,

   ``find -L`` *dismod_at_prefix* ``-name`` *pkg* . ``pc 2> /dev/null``

should find the directory where *pkg* . ``pc`` is located;
see :ref:`run_cmake.sh@dismod_at_prefix` .

.. meta::
   :keywords: ld_library_path

.. index:: ld_library_path

.. _install_unix@Paths@LD_LIBRARY_PATH:

LD_LIBRARY_PATH
===============
The library locations are set at link time using cmake's
`always full rpath <https://gitlab.kitware.com/cmake/community/-/wikis/doc/cmake/RPATH-handling>`_
commands.
Hence, it should not be necessary to set ``LD_LIBRARY_PATH`` in order for
``dismod_at`` to work.

.. meta::
   :keywords: path

.. index:: path

.. _install_unix@Paths@PATH:

PATH
====
After you install dismod_at (see below)
you should be able to execute the command

   ``dismod_at``

from any directory.
If you get the error ``dismod_at: command not found`` ,
you will need to add the binary install directory to you path.
Use the following command to find it:

   ``find -L`` *dismod_at_prefix* ``-name dismod_at 2> /dev/null``

see :ref:`run_cmake.sh@dismod_at_prefix` .

.. meta::
   :keywords: pythonpath

.. index:: pythonpath

.. _install_unix@Paths@PYTHONPATH:

PYTHONPATH
==========
After you install dismod_at
you should be able to execute the following commands:

| |tab| *python3*
| |tab| ``import dismod_at``
| |tab| ``quit`` ()

where *python3* is your
:ref:`python3 executable<run_cmake.sh@python3_executable>` .
If you get the error ``No module named 'dismod_at'`` ,
you will need to add the directory where the module is installed
to your python path.
Use the following command to find it:

   ``find -L`` *dismod_at_prefix* ``-name site-packages 2> /dev/null``

.. meta::
   :keywords: special, requirements

.. index:: special, requirements

.. _install_unix@Special Requirements:

Special Requirements
********************
The packages listed below are required by dismod_at
and may not have standard system installs

.. meta::
   :keywords: run_cmake.sh

.. index:: run_cmake.sh

.. _install_unix@Special Requirements@run_cmake.sh:

run_cmake.sh
============
The settings in :ref:`bin/run_cmake.sh<run_cmake.sh-name>`
are used by the
scripts that install the special requirements.
You must first change
these settings to the appropriate values for your system before
running the install scripts below:

.. meta::
   :keywords: eigen

.. index:: eigen

.. _install_unix@Special Requirements@eigen:

eigen
=====
The `eigen <http://eigen.tuxfamily.org>`_
linear algebra package.
The script ``bin/get_cppad_mixed.sh`` (see below)
includes an install of eigen.

.. meta::
   :keywords: ipopt

.. index:: ipopt

.. _install_unix@Special Requirements@ipopt:

ipopt
=====
The `Ipopt <https://projects.coin-or.org/Ipopt>`_
optimization package.
The script ``bin/get_cppad_mixed.sh`` (see below)
includes an install of ipopt.

.. meta::
   :keywords: cppad

.. index:: cppad

.. _install_unix@Special Requirements@cppad:

cppad
=====
The `cppad <http://www.coin-or.org/CppAD/>`_
C++ algorithmic differentiation package.
The script ``bin/get_cppad_mixed.sh`` (see below)
includes an install of cppad.

.. meta::
   :keywords: cppad_mixed

.. index:: cppad_mixed

.. _install_unix@Special Requirements@cppad_mixed:

cppad_mixed
===========
The `cppad_mixed <https://bradbell.github.io/cppad_mixed>`_
C++ random effects modeling package.
Starting in the ``dismod_at.git`` directory, the command

   ``bin/get_cppad_mixed.sh``

can be used to install eigen, ipopt, and cppad_mixed.
This script also serves as an example of how to install cppad_mixed.

.. meta::
   :keywords: dismod_at

.. index:: dismod_at

.. _install_unix@dismod_at:

dismod_at
*********
The steps above should only need to be executed once, not for
each new version of ``dismod_at``
(unless the :ref:`release_notes-name` say otherwise).
The steps below will need to be executed each time you install
a new version of ``dismod_at`` :

.. meta::
   :keywords: setup

.. index:: setup

.. _install_unix@dismod_at@Setup:

Setup
=====
The file :ref:`bin/run_cmake.sh<run_cmake.sh-name>` has setting that
you should change so they correspond to your machine.

.. meta::
   :keywords: cmake, command

.. index:: cmake, command

.. _install_unix@dismod_at@Cmake Command:

Cmake Command
=============
After changing ``bin/run_cmake.sh`` to work for your system,
in the ``dismod_at.git`` directory
execute the following command:
::

   bin/run_cmake.sh

The script also serves as an example of how to install dismod_at.

.. meta::
   :keywords: build

.. index:: build

.. _install_unix@dismod_at@Build:

Build
=====
The following command is option and will just build the
executable program ``build/devel/dismod_at`` :
::

   cd build
   make
   cd ..

.. meta::
   :keywords: test

.. index:: test

.. _install_unix@dismod_at@Test:

Test
====
The following commands are optional and will,
build the dismod_at executable,
build the examples and tests,
and run the examples, correctness tests, and speed tests:
::

   cd build
   make check
   make speed
   cd ..

Some of the tests use different random number simulations each time
they are run.
If you get a correctness check failure during a ``make check``
or ``make speed`` , try running the make command again.
If you get the same correctness check fails twice in a row,
there probably is a problem and
you should get help from the ``dismod_at`` development team.

.. meta::
   :keywords: install

.. index:: install

.. _install_unix@dismod_at@Install:

Install
=======
The following command will,
build the dismod_at library and executable if necessary,
and install dismod_at:
::

   cd build
   make install install_python
   cd ..

.. meta::
   :keywords: example

.. index:: example

.. _install_unix@Example:

Example
*******
The file :ref:`example_install.sh-name` contains an example
install of ``dismod_at`` .
The section :ref:`get_started-name` contains a list of examples and tests
of using ``dismod_at`` .
These tests are run as part of the ``make check`` command above.

.. toctree::
   :maxdepth: 1
   :hidden:

   run_cmake.sh
   example_install.sh
