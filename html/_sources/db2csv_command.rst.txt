.. _db2csv_command-name:

!!!!!!!!!!!!!!
db2csv_command
!!!!!!!!!!!!!!

xrst input file: ``python/dismod_at/db2csv_command.py``

.. meta::
   :keywords: db2csv_command, create, csv, files, that, summarize, the, database

.. index:: db2csv_command, create, csv, files, that, summarize, the, database

.. _db2csv_command-title:

Create Csv Files that Summarize The Database
############################################

.. meta::
   :keywords: syntax

.. index:: syntax

.. _db2csv_command@Syntax:

Syntax
******

.. meta::
   :keywords: as, program

.. index:: as, program

.. _db2csv_command@Syntax@As Program:

As Program
==========
``dismodat.py`` *database* ``db2csv``

.. meta::
   :keywords: as, python, function

.. index:: as, python, function

.. _db2csv_command@Syntax@As Python Function:

As Python Function
==================
``dismod_at.db2csv_command`` ( *database*  )

.. meta::
   :keywords: convention

.. index:: convention

.. _db2csv_command@Convention:

Convention
**********
The ``null`` value in the database corresponds
to an empty string in the csv files.

.. meta::
   :keywords: database

.. index:: database

.. _db2csv_command@database:

database
********
is the path from the currently directory to the database.
This must be a :ref:`dismod_at<database-name>` and
the :ref:`init_command-name` must have been run on the database.

.. meta::
   :keywords: dir

.. index:: dir

.. _db2csv_command@dir:

dir
***
We use the notation *dir* for the directory where *database*
is located.

.. meta::
   :keywords: fit_var,, fit_data_subset

.. index:: fit_var,, fit_data_subset

.. _db2csv_command@fit_var, fit_data_subset:

fit_var, fit_data_subset
************************
The :ref:`log_table-name` is used to determine if the previous
fit command had a :ref:`fit_command@simulate_index` .
If so, the :ref:`fit_var_table-name` and :ref:`fit_data_subset_table-name`
corresponds to simulated data.
Otherwise, if they exist, the correspond to the measured data.

.. meta::
   :keywords: simulate_index

.. index:: simulate_index

.. _db2csv_command@simulate_index:

simulate_index
**************
If the previous fit command had a
:ref:`fit_command@simulate_index`
that value is used for *simulate_index* below.
Otherwise, zero is used for *simulate_index* below.

.. meta::
   :keywords: option.csv

.. index:: option.csv

.. _db2csv_command@option.csv:

option.csv
**********
The file *dir* / ``option.csv`` is written by this command.
It is a CSV file with one row for each possible row in the
:ref:`option_table-name` .
The columns in ``option.csv`` are
:ref:`option_table@Table Format@option_name` and
:ref:`option_table@Table Format@option_value` .
If a row does not appear in the option table, the corresponding
default value is written to ``option.csv`` .
If the :ref:`option_table@Parent Node@parent_node_id` appears
in the option table, the *parent_node_name* row of ``option.csv``
is filled in with the corresponding node name.

.. meta::
   :keywords: log.csv

.. index:: log.csv

.. _db2csv_command@log.csv:

log.csv
*******
The file *dir* / ``log.csv`` is written by this command.
It is a CSV file with one row for each message in the :ref:`log_table-name` .
The columns in this table are
:ref:`log_table@message_type` ,
:ref:`log_table@table_name` ,
:ref:`log_table@row_id` ,
:ref:`log_table@unix_time` , and
:ref:`log_table@message` .

.. meta::
   :keywords: age_avg.csv

.. index:: age_avg.csv

.. _db2csv_command@age_avg.csv:

age_avg.csv
***********
The file *dir* / ``age_avg.csv`` is written by this command.
It is a CSV file with the contents of the age_avg table.
The only column in this table is :ref:`age_avg_table@age` .
Note that a :ref:`set_command-name` may change the value of
:ref:`option_table@Age Average Grid@ode_step_size` or
:ref:`option_table@Age Average Grid@age_avg_split` but it will not
write out the new age_avg table.

.. meta::
   :keywords: hes_fixed.csv

.. index:: hes_fixed.csv

.. _db2csv_command@hes_fixed.csv:

hes_fixed.csv
*************
If the :ref:`sample_command@asymptotic`
sample command was executed,
the contents of the :ref:`hes_fixed_table-name` are written to
the CSV file *dir* / ``hes_fixed.csv`` .
The columns in this table are
:ref:`hes_fixed_table@row_var_id` ,
:ref:`hes_fixed_table@col_var_id` ,
:ref:`hes_fixed_table@hes_fixed_value` .

.. meta::
   :keywords: hes_random.csv

.. index:: hes_random.csv

.. _db2csv_command@hes_random.csv:

hes_random.csv
**************
If a :ref:`fit both<fit_command@variables@both>` ,
:ref:`fit random<fit_command@variables@random>` ,
or :ref:`sample asymptotic<sample_command@asymptotic>`
command was executed,
the contents of the :ref:`hes_random_table-name` are written to
the CSV file *dir* / ``hes_random.csv`` .
The columns in this table are
:ref:`hes_random_table@row_var_id` ,
:ref:`hes_random_table@col_var_id` ,
:ref:`hes_random_table@hes_random_value` .

.. meta::
   :keywords: trace_fixed.csv

.. index:: trace_fixed.csv

.. _db2csv_command@trace_fixed.csv:

trace_fixed.csv
***************
If the :ref:`fit fixed<fit_command@variables@fixed>` or
:ref:`fit both<fit_command@variables@both>` command has completed,
the contents of the :ref:`trace_fixed_table-name` are written to
the CSV file *dir* / ``trace_fixed.csv`` .
The columns in this table have the same name as in the corresponding table
with the exception that the column
:ref:`trace_fixed_table@regularization_size`
is called *reg_size* .

.. meta::
   :keywords: mixed_info.csv

.. index:: mixed_info.csv

.. _db2csv_command@mixed_info.csv:

mixed_info.csv
**************
If the :ref:`fit_command-name` completed
the contents of the :ref:`mixed_info_table-name` are written to
the CSV file *dir* / ``mixed_info.csv`` .

.. meta::
   :keywords: variable.csv

.. index:: variable.csv

.. _db2csv_command@variable.csv:

variable.csv
************
The file *dir* / ``variable.csv`` is written by this command.
It is a CSV file with one row for each of the :ref:`model_variables-name`
and has the following columns:

.. meta::
   :keywords: var_id

.. index:: var_id

.. _db2csv_command@variable.csv@var_id:

var_id
======
is the :ref:`var_table@var_id` .

.. meta::
   :keywords: var_type

.. index:: var_type

.. _db2csv_command@variable.csv@var_type:

var_type
========
is the :ref:`var_table@var_type` .

.. meta::
   :keywords: s_id

.. index:: s_id

.. _db2csv_command@variable.csv@s_id:

s_id
====
is the :ref:`smooth_table@smooth_id` for this variable.
If the variable is a
:ref:`smoothing standard deviation multiplier<model_variables@Fixed Effects, theta@Smoothing Standard Deviation Multipliers, lambda>`
this is the smoothing that this multiplier effects.
Otherwise, it is the smoothing where the prior for this variable
comes from.

.. meta::
   :keywords: m_id

.. index:: m_id

.. _db2csv_command@variable.csv@m_id:

m_id
====
If this variable is a covariate multiplier, this is the corresponding
:ref:`mulcov_table@mulcov_id` .

.. meta::
   :keywords: m_diff

.. index:: m_diff

.. _db2csv_command@variable.csv@m_diff:

m_diff
======
If this variable is a covariate multiplier, this is the corresponding
:ref:`bnd_mulcov_table@max_cov_diff` .

.. meta::
   :keywords: bound

.. index:: bound

.. _db2csv_command@variable.csv@bound:

bound
=====
If the upper and lower value limits in the value prior for this variable
are not equal,
this is a bound for the absolute value of this variable; see
:ref:`bnd_mulcov_table@max_mulcov` and
:ref:`option_table@Optimize Random Only@bound_random` .

.. meta::
   :keywords: age

.. index:: age

.. _db2csv_command@variable.csv@age:

age
===
is the :ref:`age_table@age` .

.. meta::
   :keywords: time

.. index:: time

.. _db2csv_command@variable.csv@time:

time
====
is the :ref:`time_table@time` .

.. meta::
   :keywords: rate

.. index:: rate

.. _db2csv_command@variable.csv@rate:

rate
====
is the :ref:`rate_table@rate_name` .

.. meta::
   :keywords: integrand

.. index:: integrand

.. _db2csv_command@variable.csv@integrand:

integrand
=========
is the
:ref:`integrand_table@integrand_name` .

.. meta::
   :keywords: covariate

.. index:: covariate

.. _db2csv_command@variable.csv@covariate:

covariate
=========
is the
:ref:`covariate_table@covariate_name` .

.. meta::
   :keywords: node

.. index:: node

.. _db2csv_command@variable.csv@node:

node
====
is the
:ref:`node_table@node_name` .

.. meta::
   :keywords: group

.. index:: group

.. _db2csv_command@variable.csv@group:

group
=====
This field is non-empty for
:ref:`model_variables@Fixed Effects, theta@Group Covariate Multipliers` .

.. meta::
   :keywords: subgroup

.. index:: subgroup

.. _db2csv_command@variable.csv@subgroup:

subgroup
========
This field is non-empty for
:ref:`model_variables@Random Effects, u@Subgroup Covariate Multipliers` .

.. meta::
   :keywords: fixed

.. index:: fixed

.. _db2csv_command@variable.csv@fixed:

fixed
=====
is ``true`` if this variable is a
:ref:`fixed effect<model_variables@Fixed Effects, theta>` ,
otherwise it is ``false`` .

.. meta::
   :keywords: depend

.. index:: depend

.. _db2csv_command@variable.csv@depend:

depend
======
If the :ref:`depend_var_table-name` exists, this has one of the following:
``none`` if neither the data nor the prior depends on this variable,
``data`` if only the data depends on this variable,
``prior`` if only the prior depends on this variable,
``both`` if both the data and the prior depend on this variable.

.. meta::
   :keywords: fit_value

.. index:: fit_value

.. _db2csv_command@variable.csv@fit_value:

fit_value
=========
If the :ref:`fit_command-name` has been run, this is the
:ref:`fit_var_table@fit_var_value` .

.. meta::
   :keywords: start

.. index:: start

.. _db2csv_command@variable.csv@start:

start
=====
is the
:ref:`start_var_table@start_var_value`
for this variable.

.. meta::
   :keywords: scale

.. index:: scale

.. _db2csv_command@variable.csv@scale:

scale
=====
is the
:ref:`scale_var_table@scale_var_value`
for this variable.

.. meta::
   :keywords: truth

.. index:: truth

.. _db2csv_command@variable.csv@truth:

truth
=====
If the truth_var table exists, this is the
:ref:`truth_var_table@truth_var_value`
for this variable.

.. meta::
   :keywords: sam_avg

.. index:: sam_avg

.. _db2csv_command@variable.csv@sam_avg:

sam_avg
=======
If the sample table exists,
for each :ref:`sample_table@var_id`
this is the average with respect to
with respect to :ref:`sample_table@sample_index`
of the :ref:`sample_table@var_value` corresponding to
this *var_id* .

.. meta::
   :keywords: sam_std

.. index:: sam_std

.. _db2csv_command@variable.csv@sam_std:

sam_std
=======
If the sample table exists,
for each fixed :ref:`sample_table@var_id`
this is the estimated standard deviation with respect to
with respect to :ref:`sample_table@sample_index`
of the # :ref:`sample_table@var_value` corresponding to
this *var_id* .
If there is only one *sample_index* in the sample table,
this column is empty because the standard deviation cannot be estimated
from one sample.

.. meta::
   :keywords: res_value

.. index:: res_value

.. _db2csv_command@variable.csv@res_value:

res_value
=========
If the :ref:`fit_command-name` has been run, this is the
:ref:`fit_var_table@residual_value` .

.. meta::
   :keywords: res_dage

.. index:: res_dage

.. _db2csv_command@variable.csv@res_dage:

res_dage
========
If the :ref:`fit_command-name` has been run, this is the
:ref:`fit_var_table@residual_dage` ; see
:ref:`fit_var<db2csv_command@fit_var, fit_data_subset>` above.

.. meta::
   :keywords: res_dtime

.. index:: res_dtime

.. _db2csv_command@variable.csv@res_dtime:

res_dtime
=========
If the :ref:`fit_command-name` has been run, this is the
:ref:`fit_var_table@residual_dtime` ; see
:ref:`fit_var<db2csv_command@fit_var, fit_data_subset>` above.

.. meta::
   :keywords: lag_value

.. index:: lag_value

.. _db2csv_command@variable.csv@lag_value:

lag_value
=========
If the :ref:`fit_command-name` has been run, this is the
:ref:`fit_var_table@lagrange_value` ; see
:ref:`fit_var<db2csv_command@fit_var, fit_data_subset>` above.

.. meta::
   :keywords: lag_dage

.. index:: lag_dage

.. _db2csv_command@variable.csv@lag_dage:

lag_dage
========
If the :ref:`fit_command-name` has been run, this is the
:ref:`fit_var_table@lagrange_dage` ; see
:ref:`fit_var<db2csv_command@fit_var, fit_data_subset>` above.

.. meta::
   :keywords: lag_dtime

.. index:: lag_dtime

.. _db2csv_command@variable.csv@lag_dtime:

lag_dtime
=========
If the :ref:`fit_command-name` has been run, this is the
:ref:`fit_var_table@lagrange_dtime` ; see
:ref:`fit_var<db2csv_command@fit_var, fit_data_subset>` above.

.. meta::
   :keywords: sim_v,, sim_a,, sim_t

.. index:: sim_v,, sim_a,, sim_t

.. _db2csv_command@variable.csv@sim_v, sim_a, sim_t:

sim_v, sim_a, sim_t
===================
If the :ref:`simulate_command-name` has been run,
these are the values of
:ref:`prior_sim_table@prior_sim_value` ,
:ref:`prior_sim_table@prior_sim_dage` , and
:ref:`prior_sim_table@prior_sim_dtime` ,
for the
:ref:`db2csv_command@simulate_index` .

.. meta::
   :keywords: prior_info

.. index:: prior_info

.. _db2csv_command@variable.csv@prior_info:

prior_info
==========
There is a column named

    *field* _ *character*

for *character* equal to ``v`` , ``a`` and ``t``
and for *field* equal to
:ref:`prior_table@mean` ,
:ref:`prior_table@lower` ,
:ref:`prior_table@upper` ,
:ref:`prior_table@std` ,
:ref:`prior_table@eta` ,
:ref:`prior_table@nu` and
:ref:`density<prior_table@density_id>` .

#. The character ``v`` denotes this is the prior information for a value,
   ``a`` the prior information for an age difference, and
   ``t`` the prior information for a time difference.
#. The density has been mapped to the corresponding
   :ref:`density_table@density_name` .
#. If the corresponding :ref:`smooth_grid_table@value_prior_id`
   is ``null`` ,
   the :ref:`smooth_grid_table@const_value` prior is displayed.
#. If is ``null`` , or has no affect, it is displayed as empty.
   Note that the fields *eta_v* are always displayed for fixed
   effects because they have a
   :ref:`scaling<prior_table@eta@Scaling Fixed Effects>` affect.

.. meta::
   :keywords: data.csv

.. index:: data.csv

.. _db2csv_command@data.csv:

data.csv
********
The file *dir* / ``data.csv`` is written by this command.
It is a CSV file with one row for each row in the :ref:`data_subset_table-name`
and has the following columns:

.. meta::
   :keywords: data_id

.. index:: data_id

.. _db2csv_command@data.csv@data_id:

data_id
=======
is the data table
:ref:`data_table@data_id` .

.. meta::
   :keywords: data_extra_columns

.. index:: data_extra_columns

.. _db2csv_command@data.csv@data_extra_columns:

data_extra_columns
==================
Each column specified by the
:ref:`option_table@Extra Columns@data_extra_columns`
option is included in the ``data.csv`` file.

.. meta::
   :keywords: child

.. index:: child

.. _db2csv_command@data.csv@child:

child
=====
If this data row is associated with a child,
this is the name of the child. Otherwise, this data is associated
with the :ref:`option_table@Parent Node` .

.. meta::
   :keywords: node

.. index:: node

.. _db2csv_command@data.csv@node:

node
====
is the
:ref:`node_table@node_name` for this data row.
This will correspond directly to the data table
:ref:`data_table@node_id` .

.. meta::
   :keywords: group

.. index:: group

.. _db2csv_command@data.csv@group:

group
=====
is the :ref:`subgroup_table@group_name` corresponding
to the subgroup for this data row.

.. meta::
   :keywords: subgroup

.. index:: subgroup

.. _db2csv_command@data.csv@subgroup:

subgroup
========
is the
:ref:`subgroup_table@subgroup_name` for this data row.
This will correspond directly to the data table
:ref:`data_table@subgroup_id` .

.. meta::
   :keywords: integrand

.. index:: integrand

.. _db2csv_command@data.csv@integrand:

integrand
=========
is the integrand table
:ref:`integrand_table@integrand_name` .

.. meta::
   :keywords: weight

.. index:: weight

.. _db2csv_command@data.csv@weight:

weight
======
is the
:ref:`weight_table@weight_name` .

.. meta::
   :keywords: age_lo

.. index:: age_lo

.. _db2csv_command@data.csv@age_lo:

age_lo
======
is the lower age used in the fits; i.e., the data table
:ref:`data_table@age_lower` modified by the
age compression interval in the
:ref:`option_table@compress_interval` option.

.. meta::
   :keywords: age_up

.. index:: age_up

.. _db2csv_command@data.csv@age_up:

age_up
======
is the upper age used in the fits; i.e., the data table
:ref:`data_table@age_upper` modified by the
age compression interval.

.. meta::
   :keywords: time_lo

.. index:: time_lo

.. _db2csv_command@data.csv@time_lo:

time_lo
=======
is the lower time used in the fits; i.e., the data table
:ref:`data_table@time_lower` modified by the
time compression interval.

.. meta::
   :keywords: time_up

.. index:: time_up

.. _db2csv_command@data.csv@time_up:

time_up
=======
is the upper time used in the fits; i.e., the data table
:ref:`data_table@time_upper` modified by the
time compression interval.

.. meta::
   :keywords: d_out

.. index:: d_out

.. _db2csv_command@data.csv@d_out:

d_out
=====
is the value of
:ref:`data_table@hold_out` in the data table.

.. meta::
   :keywords: s_out

.. index:: s_out

.. _db2csv_command@data.csv@s_out:

s_out
=====
is the value of
:ref:`data_subset_table@hold_out` in the
data_subset table.

.. meta::
   :keywords: density

.. index:: density

.. _db2csv_command@data.csv@density:

density
=======
is the
:ref:`density_table@density_name` for data_subset table
:ref:`data_subset_table@density_id` for this row.

.. meta::
   :keywords: eta

.. index:: eta

.. _db2csv_command@data.csv@eta:

eta
===
is the data_subset table
:ref:`data_subset_table@eta` for this row.

.. meta::
   :keywords: nu

.. index:: nu

.. _db2csv_command@data.csv@nu:

nu
==
is the data_subset table
:ref:`data_subset_table@nu` for this row.

.. meta::
   :keywords: meas_std

.. index:: meas_std

.. _db2csv_command@data.csv@meas_std:

meas_std
========
is the data table
:ref:`data_table@meas_std` .

.. meta::
   :keywords: meas_stdcv

.. index:: meas_stdcv

.. _db2csv_command@data.csv@meas_stdcv:

meas_stdcv
==========
is the minimum cv standard deviation used to define the likelihood; see
:ref:`Delta<data_like@Notation@Minimum CV Standard Deviation, Delta_i>` .

.. meta::
   :keywords: meas_delta

.. index:: meas_delta

.. _db2csv_command@data.csv@meas_delta:

meas_delta
==========
If the previous fit command had a
:ref:`db2csv_command@simulate_index` ,
this column is empty.
We use *delta* to denote the
:ref:`adjusted standard deviation<data_like@Adjusted Standard Deviation, delta_i(theta)>` for this row.
If the density for this row is
:ref:`density_table@Notation@Linear`

    *meas_delta* = *delta*

Otherwise, the density is log scaled and

    *delta* = ``log`` ( *meas_value* + *eta* + *meas_delta* ) ``- log`` ( *meas_value* + *eta* )

The value *delta* is computed by dividing by the residual,
which is plus infinity and not valid when the residual is zero.
This value is reported as empty if the calculation for *meas_delta*
is greater than the maximum python ``float`` value.

.. meta::
   :keywords: meas_value

.. index:: meas_value

.. _db2csv_command@data.csv@meas_value:

meas_value
==========
is the data table
:ref:`data_table@meas_value` .

.. meta::
   :keywords: avgint

.. index:: avgint

.. _db2csv_command@data.csv@avgint:

avgint
======
If the :ref:`fit_command-name` has been run, this is the
:ref:`fit_data_subset_table@avg_integrand` for this row.

.. meta::
   :keywords: residual

.. index:: residual

.. _db2csv_command@data.csv@residual:

residual
========
If the :ref:`fit_command-name` has been run, this is the
:ref:`fit_data_subset_table@weighted_residual`
for this row; see
:ref:`fit_data_subset<db2csv_command@fit_var, fit_data_subset>`
above.

.. meta::
   :keywords: sim_value

.. index:: sim_value

.. _db2csv_command@data.csv@sim_value:

sim_value
=========
If the :ref:`simulate_command-name` has been run, this is the
:ref:`data_sim_table@data_sim_value` for this
:ref:`db2csv_command@data.csv@data_id` and
:ref:`fit_command@simulate_index`
in the previous fit command.
If there is no *simulate_index*
in the previous fit command, the
value zero is used for the *simulate_index* .

.. meta::
   :keywords: covariates

.. index:: covariates

.. _db2csv_command@data.csv@Covariates:

Covariates
==========
For each covariate in the :ref:`covariate_table-name` there is a column with
the corresponding *covariate_name* .
For each covariate column and measurement row, the value in the
covariate column is covariate value for this measurement minus
the reference value for this covariate, i.e., the corresponding
covariate difference
:ref:`x_ij<avg_integrand@Data or Avgint Table Notation@Covariate Difference, x_ij>`
in the model for the average integrand.

.. meta::
   :keywords: predict.csv

.. index:: predict.csv

.. _db2csv_command@predict.csv:

predict.csv
***********
If the :ref:`predict_command-name` has was executed,
the CSV file *dir* / ``predict.csv`` is written.
For each row of the :ref:`predict_table-name`
there is a corresponding row in ``predict.csv`` .

.. meta::
   :keywords: avgint_id

.. index:: avgint_id

.. _db2csv_command@predict.csv@avgint_id:

avgint_id
=========
is the avgint table
:ref:`avgint_table@avgint_id` .

.. meta::
   :keywords: avgint_extra_columns

.. index:: avgint_extra_columns

.. _db2csv_command@predict.csv@avgint_extra_columns:

avgint_extra_columns
====================
Each column specified by the
:ref:`option_table@Extra Columns@avgint_extra_columns`
option is included in the ``predict.csv`` file.

.. meta::
   :keywords: s_index

.. index:: s_index

.. _db2csv_command@predict.csv@s_index:

s_index
=======
This identifies the set model variables corresponding to the
last :ref:`predict_command-name` executed.
If the source for the predict command was
:ref:`predict_command@source@sample` ,
the model variables correspond to the rows on the
sample table with the same :ref:`sample_table@sample_index`
equal to *s_index* .
Otherwise, *s_index* is empty and
the model variables correspond to the
:ref:`predict_command@source@fit_var` or
:ref:`predict_command@source@truth_var` table
depending on the source for the last predict command executed.

.. meta::
   :keywords: avgint

.. index:: avgint

.. _db2csv_command@predict.csv@avgint:

avgint
======
is the :ref:`average integrand<avg_integrand@Average Integrand, A_i>`
:math:`A_i(u, \theta)`. The model variables :math:`(u, \theta)`
correspond to the *s_index* , and measurement subscript :math:`i`
denotes to the :ref:`avgint_table-name` information
for this row of ``predict.csv`` ; i.e., *age_lo* , *age_up* ,
...

.. meta::
   :keywords: age_lo

.. index:: age_lo

.. _db2csv_command@predict.csv@age_lo:

age_lo
======
is the avgint table
:ref:`avgint_table@age_lower` .

.. meta::
   :keywords: age_up

.. index:: age_up

.. _db2csv_command@predict.csv@age_up:

age_up
======
is the avgint table
:ref:`data_table@age_upper` .

.. meta::
   :keywords: time_lo

.. index:: time_lo

.. _db2csv_command@predict.csv@time_lo:

time_lo
=======
is the avgint table
:ref:`data_table@time_lower` .

.. meta::
   :keywords: time_up

.. index:: time_up

.. _db2csv_command@predict.csv@time_up:

time_up
=======
is the avgint table
:ref:`data_table@time_upper` .

.. meta::
   :keywords: integrand

.. index:: integrand

.. _db2csv_command@predict.csv@integrand:

integrand
=========
is the avgint table
:ref:`integrand_table@integrand_name` .

.. meta::
   :keywords: weight

.. index:: weight

.. _db2csv_command@predict.csv@weight:

weight
======
is the
:ref:`weight_table@weight_name` for this row.

.. meta::
   :keywords: node

.. index:: node

.. _db2csv_command@predict.csv@node:

node
====
is the
:ref:`node_table@node_name` for this row.

.. meta::
   :keywords: group

.. index:: group

.. _db2csv_command@predict.csv@group:

group
=====
is the :ref:`subgroup_table@group_name` corresponding
to the subgroup for this data row.

.. meta::
   :keywords: subgroup

.. index:: subgroup

.. _db2csv_command@predict.csv@subgroup:

subgroup
========
is the
:ref:`subgroup_table@subgroup_name` for this data row.
This will correspond directly to the avgint table
:ref:`avgint_table@subgroup_id` .

.. meta::
   :keywords: covariates

.. index:: covariates

.. _db2csv_command@predict.csv@Covariates:

Covariates
==========
For each covariate in the :ref:`covariate_table-name` there is a column with
the corresponding *covariate_name* .
For each covariate column and measurement row, the value in the
covariate column is covariate value in the :ref:`avgint_table-name`
minus the reference value for this covariate. i.e., the corresponding
covariate difference
:ref:`x_ij<avg_integrand@Data or Avgint Table Notation@Covariate Difference, x_ij>`
in the model for the average integrand.

.. meta::
   :keywords: example

.. index:: example

.. _db2csv_command@Example:

Example
*******
The file :ref:`db2csv_command.py-name` contains an example and test
using this command.

.. meta::
   :keywords: ihme_db.sh

.. index:: ihme_db.sh

.. _db2csv_command@ihme_db.sh:

ihme_db.sh
**********
The script :ref:`ihme_db.sh-name` can be used to run ``db2csv`` for a
dismod_at database on the IHME cluster.

.. toctree::
   :maxdepth: 1
   :hidden:

   db2csv_command.py
   ihme_db.sh
