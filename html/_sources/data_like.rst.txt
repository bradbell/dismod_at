.. _data_like-name:

!!!!!!!!!
data_like
!!!!!!!!!

xrst input file: ``xrst/model/data_like.xrst``

.. meta::
   :keywords: data_like, data, likelihood, and, weighted, residuals

.. index:: data_like, data, likelihood, and, weighted, residuals

.. _data_like-title:

Data Likelihood and Weighted Residuals
######################################

.. meta::
   :keywords: notation

.. index:: notation

.. _data_like@Notation:

Notation
********

.. meta::
   :keywords: i

.. index:: i

.. _data_like@Notation@i:

i
=
We use :math:`i` to
denote the :ref:`data_table@data_id`
for a row in the data table.

.. meta::
   :keywords: a_i

.. index:: a_i

.. _data_like@Notation@a_i:

a_i
===
We use :math:`a_i` to denote the corresponding
:ref:`data_table@age_lower` value.

.. meta::
   :keywords: b_i

.. index:: b_i

.. _data_like@Notation@b_i:

b_i
===
We use :math:`b_i` to denote the corresponding
:ref:`data_table@age_upper` value.

.. meta::
   :keywords: d_i

.. index:: d_i

.. _data_like@Notation@d_i:

d_i
===
We use :math:`d_i` to denote the
:ref:`data_table@density_id` and
:ref:`data_table@eta` value corresponding to :math:`i`.

.. meta::
   :keywords: i_i

.. index:: i_i

.. _data_like@Notation@I_i:

I_i
===
We use :math:`I_i` to denote the corresponding
:ref:`data_table@integrand_id` value.

.. meta::
   :keywords: s_i

.. index:: s_i

.. _data_like@Notation@s_i:

s_i
===
We use :math:`s_i` to denote the corresponding
:ref:`data_table@time_lower` value.

.. meta::
   :keywords: t_i

.. index:: t_i

.. _data_like@Notation@t_i:

t_i
===
We use :math:`t_i` to denote the corresponding
:ref:`data_table@time_upper` value.

.. meta::
   :keywords: w_i

.. index:: w_i

.. _data_like@Notation@w_i:

w_i
===
We use :math:`w_i (a, t)` for the weighting as a function of age and time
that corresponds to the
:ref:`data_table@weight_id` for this *data_id* .

.. meta::
   :keywords: x_ij

.. index:: x_ij

.. _data_like@Notation@x_ij:

x_ij
====
We use :math:`x_{i,j}` to denote the corresponding
:ref:`covariate<data_table@Covariates>` values where :math:`j`
denotes the :ref:`covariate_table@covariate_id` .
Note that the covariate
:ref:`covariate_table@reference` has already
been subtracted from these values.

.. meta::
   :keywords: y_i

.. index:: y_i

.. _data_like@Notation@y_i:

y_i
===
We use :math:`y_i` to denote the corresponding
:ref:`data_table@meas_value` value.

.. meta::
   :keywords: minimum, cv, standard, deviation,, delta_i

.. index:: minimum, cv, standard, deviation,, delta_i

.. _data_like@Notation@Minimum CV Standard Deviation, Delta_i:

Minimum CV Standard Deviation, Delta_i
======================================
Let *minimum_meas_cv* be the integrand table
:ref:`integrand_table@minimum_meas_cv` corresponding to
this integrand :math:`I_i`.
Let :ref:`data_table@meas_std`
and :ref:`data_table@meas_value`
correspond to this data table
:ref:`data_table@data_id` .
The minimum cv standard deviation is defined by
:math:`\Delta_i =`

``max`` ( *meas_std* , *minimum_meas_cv* * | *meas_value* | )

.. meta::
   :keywords: transformed, standard, deviation,, sigma_i

.. index:: transformed, standard, deviation,, sigma_i

.. _data_like@Notation@Transformed Standard Deviation, sigma_i:

Transformed Standard Deviation, sigma_i
=======================================
The transformed standard deviation is

.. math::

   \sigma_i = \left\{ \begin{array}{ll}
      \log[ y_i + \eta_i + \Delta_i ] - \log( y_i + \eta_i )
         & \R{if \; log \; density}
      \\
      \Delta_i
         & \R{otherwise}
   \end{array} \right.

.. meta::
   :keywords: fixed, effects,, theta

.. index:: fixed, effects,, theta

.. _data_like@Notation@Fixed Effects, theta:

Fixed Effects, theta
====================
We use :math:`\theta` to denote the vector of
:ref:`fixed effects<model_variables@Fixed Effects, theta>` .

.. meta::
   :keywords: random, effects,, u

.. index:: random, effects,, u

.. _data_like@Notation@Random Effects, u:

Random Effects, u
=================
We use :math:`u` to denote the vector of
:ref:`random effects<model_variables@Random Effects, u>` .
There is a different random effects vector :math:`u` for each child.
The *node_id* for each data point determines the random effects for
:ref:`data_table@node_id@Child Data` .
Note that there are no random effects for
:ref:`data_table@node_id@Parent Data` .
This corresponds to :math:`u = 0`.

.. meta::
   :keywords: average, integrand,, a_i(u,, theta)

.. index:: average, integrand,, a_i(u,, theta)

.. _data_like@Notation@Average Integrand, A_i(u, theta):

Average Integrand, A_i(u, theta)
================================
Let :math:`A_i ( u , \theta )` denote the
:ref:`average integrand<avg_integrand@Average Integrand, A_i>` for this
*data_id* .

.. meta::
   :keywords: measurement, noise, covariates

.. index:: measurement, noise, covariates

.. _data_like@Measurement Noise Covariates:

Measurement Noise Covariates
****************************

.. meta::
   :keywords: k_i

.. index:: k_i

.. _data_like@Measurement Noise Covariates@K_i:

K_i
===
There is a set of rows in the mulcov table such that
:ref:`mulcov_table@integrand_id` is equal to :math:`I_i` and
:ref:`mulcov_table@mulcov_type` is equal to ``meas_noise`` .
We use :math:`K_i` to denote the corresponding set of
:ref:`mulcov_table@covariate_id` values for
which this is the case.

.. meta::
   :keywords: gamma_j, (a,, t)

.. index:: gamma_j, (a,, t)

.. _data_like@Measurement Noise Covariates@gamma_j (a, t):

gamma_j (a, t)
==============
For each covariate index :math:`j \in K_i` ,
we use :math:`\gamma_j (a, t)` to denote the
piecewise linear function corresponding to the
:ref:`group covariate multiplier<model_variables@Fixed Effects, theta@Group Covariate Multipliers>`
variables for the corresponding
:ref:`mulcov_table@mulcov_id` .
Note that these are only
:ref:`mulcov_table@mulcov_type@meas_noise` covariate multipliers.

.. meta::
   :keywords: average, noise, effect,, e_i(theta)

.. index:: average, noise, effect,, e_i(theta)

.. _data_like@Measurement Noise Covariates@Average Noise Effect, E_i(theta):

Average Noise Effect, E_i(theta)
================================
We define the average noise effect by

.. math::

   E_i ( \theta )
   =
   \frac{1}{\bar{w}_i}
      \int_{a(i)}^{b(i)}  \int_{s(i)}^{t(i)}
      \left(
         \sum_{j \in K_i} x_{i,j} \gamma_j (a, t)
      \right)
      w_i (a,t) \; \B{d} t \; \B{d} a

.. meta::
   :keywords: adjusted, standard, deviation,, delta_i(theta)

.. index:: adjusted, standard, deviation,, delta_i(theta)

.. _data_like@Adjusted Standard Deviation, delta_i(theta):

Adjusted Standard Deviation, delta_i(theta)
*******************************************
For :math:`j \in K_i` it should hold that
:math:`0 \leq x_{i,j}`, and
:math:`0 \leq \gamma_j (a, t)`
so that :math:`\sigma_i` is less than or equal :math:`\delta_i ( \theta )`
defined below.
It is important to realize that
for :ref:`density_table@Notation@Linear` densities,
:math:`\delta_i ( \theta )` has the same units as the data, and
for :ref:`density_table@Notation@Log Scaled` densities
:math:`\delta_i ( \theta)` is in log of the data space.
The :ref:`mess_delta<db2csv_command@data.csv@meas_delta>` column
of the data.csv file displays the data units value corresponding to
:math:`\delta_i ( \theta )`.

.. meta::
   :keywords: scaling

.. index:: scaling

.. _data_like@Adjusted Standard Deviation, delta_i(theta)@Scaling:

Scaling
=======
For some cases below, :math:`E_i ( \theta )` multiplies the
:ref:`sigma_i<data_like@Notation@Transformed Standard Deviation, sigma_i>`
instead of multiplying :math:`y_i`.
This avoids have no effect when :math:`y_i` is zero.
It is also possible to scale :math:`E_i ( \theta )`
by any factor one chooses by changing the value of the covariates
:math:`x_{ij}`; see the definition of :math:`E_i ( \theta )` above.

.. meta::
   :keywords: add, variance, or, standard, deviation

.. index:: add, variance, or, standard, deviation

.. _data_like@Adjusted Standard Deviation, delta_i(theta)@Add Variance or Standard Deviation:

Add Variance or Standard Deviation
==================================
Adding standard deviations requires fewer
floating point operations (for every data point)
but this is not expected to be significant.
In addition, if the covariate value is one, the covariate multipliers
have the same units as the data.
On the other hand, an initial value of zero does not work well
in this case because the derivative of the object with respect to the
multiplier is zero.
Adding variances does not have this problem,
but when the covariate value is one, the covariate multipliers
have data squared units.

.. meta::
   :keywords: add_std_scale_none

.. index:: add_std_scale_none

.. _data_like@Adjusted Standard Deviation, delta_i(theta)@add_std_scale_none:

add_std_scale_none
==================
If *meas_noise_effect* is ``add_std_scale_none``
(add standard deviations and no scaling)
the adjusted standard deviation is

.. math::

   \delta_i ( \theta ) = \sigma_i + E_i (\theta)

.. meta::
   :keywords: add_std_scale_log

.. index:: add_std_scale_log

.. _data_like@Adjusted Standard Deviation, delta_i(theta)@add_std_scale_log:

add_std_scale_log
=================
If *meas_noise_effect* is ``add_std_scale_log``
(add standard deviations and only scale log density cases)
the adjusted standard deviation is

.. math::

   \delta_i ( \theta ) = \left\{ \begin{array}{ll}
      \sigma_i [ 1 + E_i (\theta) ] & \R{if \; log \; density} \\
      \sigma_i + E_i (\theta)       & \R{otherwise}
   \end{array} \right.

.. meta::
   :keywords: add_std_scale_all

.. index:: add_std_scale_all

.. _data_like@Adjusted Standard Deviation, delta_i(theta)@add_std_scale_all:

add_std_scale_all
=================
If :ref:`option_table@meas_noise_effect` is
``add_std_scale_all``
(add standard deviations and scale all cases)
the adjusted standard deviation is

.. math::

   \delta_i ( \theta ) = \sigma_i [ 1 + E_i (\theta) ]

.. meta::
   :keywords: add_var_scale_none

.. index:: add_var_scale_none

.. _data_like@Adjusted Standard Deviation, delta_i(theta)@add_var_scale_none:

add_var_scale_none
==================
If *meas_noise_effect* is ``add_var_scale_none``
(add variances and no scaling)
the adjusted standard deviation is

.. math::

   \delta_i ( \theta ) = \sqrt{ \sigma_i^2 + E_i (\theta) }

.. meta::
   :keywords: add_var_scale_log

.. index:: add_var_scale_log

.. _data_like@Adjusted Standard Deviation, delta_i(theta)@add_var_scale_log:

add_var_scale_log
=================
If *meas_noise_effect* is ``add_var_scale_log``
(add variances and only scale log density cases)
the adjusted standard deviation is

.. math::

   \delta_i ( \theta ) = \left\{ \begin{array}{ll}
      \sigma_i \sqrt{ 1 + E_i (\theta) } & \R{if \; log \; density} \\
      \sqrt{ \sigma_i^2 + E_i (\theta) } & \R{otherwise}
   \end{array} \right.

.. meta::
   :keywords: add_var_scale_all

.. index:: add_var_scale_all

.. _data_like@Adjusted Standard Deviation, delta_i(theta)@add_var_scale_all:

add_var_scale_all
=================
If *meas_noise_effect* is ``add_var_scale_all``
(add variances and scale all cases)
the adjusted standard deviation is

.. math::

   \delta_i ( \theta ) = \sigma_i \sqrt{ 1 + E_i (\theta) }

.. meta::
   :keywords: weighted, residual, and, likelihood

.. index:: weighted, residual, and, likelihood

.. _data_like@Weighted Residual and Likelihood:

Weighted Residual and Likelihood
********************************
The :ref:`weighted residual<statistic@Weighted Residual Function, R>`
is a function of the random effects :math:`u`
and the fixed effects :math:`\theta`,

.. math::

    R [
      y_i                  \W{,}
      A_i ( u, \theta )    \W{,}
      \delta_i ( \theta )  \W{,}
      d_i
   ]

The likelihood is

.. math::

   \B{p}( y_i | u , \theta )
   =
   \exp \left( D [
      y_i                  \W{,}
      A_i ( u, \theta )    \W{,}
      \delta_i ( \theta )  \W{,}
      d_i
   ] \right)

see the log-density function
:ref:`D<statistic@Log-Density Function, D>` .
