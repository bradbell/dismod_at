<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>bin/run_cmake.sh: User Configuration Options</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="bin/run_cmake.sh: User Configuration Options">
<meta name="keywords" id="keywords" content=" bin/run_cmake.sh: user configuration options verbose_makefile build_type dismod_at_prefix debug release python3_executable choosing c++ compiler extra_cxx_flags cmake_libdir system_specific_library_list ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_run_cmake.sh_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://bradbell.github.io/dismod_at" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Location-&gt;</option>
<option>dismod_at</option>
<option>install</option>
<option>install_unix</option>
<option>run_cmake.sh</option>
</select>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Search-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td><a href="install_unix.htm" target="_top">Prev</a>
</td><td><a href="example_install.sh.htm" target="_top">Next</a>
</td><td>
<script type='text/javascript' language='JavaScript' src='_childtable_dismod_at_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_install_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_install_unix_htm.js'></script>
</td>
<td>run_cmake.sh</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@ 


<center><b><big><big>bin/run_cmake.sh: User Configuration Options</big></big></b></center>

<br><a href="run_cmake.sh.htm#verbose_makefile" target="_top">verbose_makefile</a>
<br><a href="run_cmake.sh.htm#build_type" target="_top">build_type</a>
<br><a href="run_cmake.sh.htm#dismod_at_prefix" target="_top">dismod_at_prefix</a>
<br><a href="run_cmake.sh.htm#Debug and Release" target="_top">Debug&nbsp;and&nbsp;Release</a>
<br><a href="run_cmake.sh.htm#python3_executable" target="_top">python3_executable</a>
<br><a href="run_cmake.sh.htm#Choosing C++ Compiler" target="_top">Choosing&nbsp;C++&nbsp;Compiler</a>
<br><a href="run_cmake.sh.htm#extra_cxx_flags" target="_top">extra_cxx_flags</a>
<br><a href="run_cmake.sh.htm#cmake_libdir" target="_top">cmake_libdir</a>
<br><a href="run_cmake.sh.htm#system_specific_library_list" target="_top">system_specific_library_list</a>
<br><br>
<b><big><a name="verbose_makefile" id="verbose_makefile">verbose_makefile</a></big></b>
<br>
Use 'no' for normal and 'yes' for verbose make output:
<code><font color='blue'><pre style='display:inline'> 
verbose_makefile='no'
</pre></font></code>
<br>
<b><big><a name="build_type" id="build_type">build_type</a></big></b>
<br>
Use either <code><font color="blue">debug</font></code> or <code><font color="blue">release</font></code> for the type of this build:
<code><font color='blue'><pre style='display:inline'> 
build_type='release'
</pre></font></code>
<br>
<b><big><a name="dismod_at_prefix" id="dismod_at_prefix">dismod_at_prefix</a></big></b>
<br>
Prefix where dismod_at will be installed:
<code><font color='blue'><pre style='display:inline'> 
dismod_at_prefix=&quot;$HOME/prefix/dismod_at&quot;
</pre></font></code>
If 
<code><i><font color="black"><span style='white-space: nowrap'>dismod_at_prefix</span></font></i></code>
 ends in <code><font color="blue">dismod_at</font></code>,
<code><font color="blue">run_cmake.sh</font></code> will use a soft link from this prefix to

<code><i><font color="black"><span style='white-space: nowrap'>dismod_at_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>.debug</span></font></code>
 or

<code><i><font color="black"><span style='white-space: nowrap'>dismod_at_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>.release</span></font></code>

depending on the choice for 
<code><i><font color="black"><span style='white-space: nowrap'>build_type</span></font></i></code>
.

<br>
<br>
<b><big><a name="Debug and Release" id="Debug and Release">Debug and Release</a></big></b>
<br>
If a soft link is used for the install,
the same technique will be used to map the <code><font color="blue">build</font></code>
directory to the debug or release version.
If you are using both a debug and release versions of dismod_at,
both versions of the
<a href="install_unix.htm#Special Requirements" target="_top"><span style='white-space: nowrap'>special&nbsp;requirements</span></a>

will need to be installed.

<br>
<br>
<b><big><a name="python3_executable" id="python3_executable">python3_executable</a></big></b>
<br>
Path to the python3 executable on this machine:
<code><font color='blue'><pre style='display:inline'> 
python3_executable='/usr/bin/python3'
</pre></font></code>
In the past, removing the <code><font color="blue">#</font></code> characters in front of the following
command would work for the IHME cluster:

<code><font color="blue"><span style='white-space: nowrap'><br>
#&nbsp;python3_executable='/usr/local/anaconda3-current/bin/python'<br>
</span></font></code>
<br>
<b><big><a name="Choosing C++ Compiler" id="Choosing C++ Compiler">Choosing C++ Compiler</a></big></b>
<br>
Which c++ compiler should cmake use (empty means cmake will choose it).
<code><font color='blue'><pre style='display:inline'> 
cmake_cxx_compiler=''
</pre></font></code>
<br>
<b><big><a name="extra_cxx_flags" id="extra_cxx_flags">extra_cxx_flags</a></big></b>
<br>
Extra C++ flags used during compilation:
<code><font color='blue'><pre style='display:inline'> 
extra_cxx_flags='-std=c++11 -Wpedantic -Wall -Wshadow -Wconversion'
</pre></font></code>
An alternative might be <code><font color="blue">-Wall</font></code>.

<br>
<br>
<b><big><a name="cmake_libdir" id="cmake_libdir">cmake_libdir</a></big></b>
<br>
Sub-directory of each prefix where libraries are installed.
<code><font color='blue'><pre style='display:inline'> 
cmake_libdir='lib64'
</pre></font></code>
<br>
<b><big><a name="system_specific_library_list" id="system_specific_library_list">system_specific_library_list</a></big></b>
<br>
List of libraries that are needed for a particular system. For example,
if when you build <code><font color="blue">dismod_at</font></code> the <code><font color="blue">pthread</font></code> library is
required by your system, then include it here.
Libraries in the list can be separated by spaces or semi-colons.
<code><font color='blue'><pre style='display:inline'> 
system_specific_library_list=''
</pre></font></code>

<hr>Input File: bin/run_cmake.sh

</body>
</html>
