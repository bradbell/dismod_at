<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Dismod_at Wish List</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Dismod_at Wish List">
<meta name="keywords" id="keywords" content=" dismod_at wish list censored laplace create_database ode solution prevalence large excess mortality csv2db command covariate multipliers random effects grids value priors difference sample conditionals checkpointing meas_std diagrams lagrange documentation real world example user examples sampling starting point tracing optimization windows install ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_wish_list_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://bradbell.github.io/dismod_at" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Location-&gt;</option>
<option>dismod_at</option>
<option>wish_list</option>
</select>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Search-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td><a href="whats_new_2015.htm" target="_top">Prev</a>
</td><td><a href="_reference.htm" target="_top">Next</a>
</td><td>
<script type='text/javascript' language='JavaScript' src='_childtable_dismod_at_htm.js'></script>
</td>
<td>wish_list</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@


<center><b><big><big>Dismod_at Wish List</big></big></b></center>

<br><a href="wish_list.htm#Censored Laplace" target="_top">Censored&nbsp;Laplace</a>
<br><a href="wish_list.htm#create_database" target="_top">create_database</a>
<br><a href="wish_list.htm#ODE Solution" target="_top">ODE&nbsp;Solution</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="wish_list.htm#ODE Solution.Prevalence ODE" target="_top">Prevalence&nbsp;ODE</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="wish_list.htm#ODE Solution.Large Excess Mortality" target="_top">Large&nbsp;Excess&nbsp;Mortality</a>
<br><a href="wish_list.htm#csv2db Command" target="_top">csv2db&nbsp;Command</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="wish_list.htm#csv2db Command.Covariate Multipliers" target="_top">Covariate&nbsp;Multipliers</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="wish_list.htm#csv2db Command.Random Effects" target="_top">Random&nbsp;Effects</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="wish_list.htm#csv2db Command.Grids" target="_top">Grids</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="wish_list.htm#csv2db Command.Value Priors" target="_top">Value&nbsp;Priors</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="wish_list.htm#csv2db Command.Difference Priors" target="_top">Difference&nbsp;Priors</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="wish_list.htm#csv2db Command.Sample" target="_top">Sample</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="wish_list.htm#csv2db Command.Conditionals" target="_top">Conditionals</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="wish_list.htm#csv2db Command.Checkpointing" target="_top">Checkpointing</a>
<br><a href="wish_list.htm#meas_std" target="_top">meas_std</a>
<br><a href="wish_list.htm#Command Diagrams" target="_top">Command&nbsp;Diagrams</a>
<br><a href="wish_list.htm#Lagrange Multipliers" target="_top">Lagrange&nbsp;Multipliers</a>
<br><a href="wish_list.htm#Documentation" target="_top">Documentation</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="wish_list.htm#Documentation.Real World Example" target="_top">Real&nbsp;World&nbsp;Example</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="wish_list.htm#Documentation.User Examples" target="_top">User&nbsp;Examples</a>
<br><a href="wish_list.htm#Sampling Random Effects" target="_top">Sampling&nbsp;Random&nbsp;Effects</a>
<br><a href="wish_list.htm#Random Starting Point" target="_top">Random&nbsp;Starting&nbsp;Point</a>
<br><a href="wish_list.htm#Tracing Optimization" target="_top">Tracing&nbsp;Optimization</a>
<br><a href="wish_list.htm#Windows Install" target="_top">Windows&nbsp;Install</a>
<br><br>
<b><big><a name="Censored Laplace" id="Censored Laplace">Censored Laplace</a></big></b>
<br>
The censored density formula for a Gaussian
<a href="censor_density.htm#Gaussian.Censored Density, G(y,mu,delta,c)" target="_top"><span style='white-space: nowrap'>G(y,mu,delta,c)</span></a>

is correct even if <small>@(@
c > \mu
@)@</small>.
On the other hand, the formula for the Laplace case
<a href="censor_density.htm#Laplace.Censored Density, L(y,mu,delta,c)" target="_top"><span style='white-space: nowrap'>L(y,mu,delta,c)</span></a>

requires <small>@(@
c \leq \mu
@)@</small>.
The Laplace case can be extended using the fact that it is symmetric,
integrating from <small>@(@
\mu
@)@</small> to <small>@(@
c
@)@</small>,
using absolute values for the integration limits,
and the Sign function.
This will result in a non-smooth the optimization problem.
Perhaps the problem can be reformulated with auxillary variables
to be a smooth problem ?

<br>
<br>
<b><big><a name="create_database" id="create_database">create_database</a></big></b>
<br>
Make a version of <a href="create_database.htm" target="_top"><span style='white-space: nowrap'>create_database</span></a>
 that uses
keyword arguments and replaces the ones that are not present by
default values. This could be done using the prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;create_database(*</span></font><i><font color="black"><span style='white-space: nowrap'>args</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;**</span></font><i><font color="black"><span style='white-space: nowrap'>kwargs</span></font></i><font color="blue"><span style='white-space: nowrap'>)&nbsp;:<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>args</span></font></i></code>
 are the positional arguments and

<code><i><font color="black"><span style='white-space: nowrap'>kwargs</span></font></i></code>
 are the keyword arguments.
This would enable backward compatibility.

<br>
<br>
<b><big><a name="ODE Solution" id="ODE Solution">ODE Solution</a></big></b>


<br>
<br>
<big><a name="ODE Solution.Prevalence ODE" id="ODE Solution.Prevalence ODE">Prevalence ODE</a></big>
<br>
If <small>@(@
S
@)@</small> and <small>@(@
C
@)@</small> satisfy the dismod_at
<a href="avg_integrand.htm#Ordinary Differential Equation" target="_top"><span style='white-space: nowrap'>ordinary&nbsp;differential&nbsp;equation</span></a>
 then prevalence <small>@(@
P = C / (S + C)
@)@</small> satisfies
<small>@[@

	P' = \iota  [ 1 - P ] - \rho P - \chi  [ 1 - P] P

@]@</small>
We can therefore solve for prevalence without other cause mortality
<small>@(@
\omega
@)@</small> or all cause mortality <small>@(@
\omega + \chi P
@)@</small>.
<ol type="1"><li>
The ODE for <small>@(@
P
@)@</small> is non-linear,
while the ODE is <small>@(@
(S, C)
@)@</small> is linear.
</li><li>

All of the current integrands, except for
<a href="avg_integrand.htm#Integrand, I_i(a,t).susceptible" target="_top"><span style='white-space: nowrap'>susceptible</span></a>
 and
<a href="avg_integrand.htm#Integrand, I_i(a,t).withC" target="_top"><span style='white-space: nowrap'>withC</span></a>

can be computed from <small>@(@
P
@)@</small> (given that the rates are inputs to the ODE).
</li><li>

If we know all cause mortality <small>@(@
\alpha = \omega + \chi P
@)@</small>,
once we have solved for <small>@(@
P
@)@</small>,
we can compute <small>@(@
\omega = \alpha - \chi P
@)@</small>.
Furthermore
<small>@[@

	(S + C)' = - \alpha (S + C)

@]@</small>
So we can also compute <small>@(@
S + C
@)@</small>, and
<small>@(@
C = P (S + C)
@)@</small>,
</li><li>

Given the original ODE, we know that the true solution for
<small>@(@
S
@)@</small>, must be positive, and <small>@(@
C
@)@</small>, <small>@(@
P
@)@</small> must be
non-negative.
Negative values for these quantities will correspond to
numerical precision errors in the solution of the ODE.
</li><li>

One advantage of this approach,
over the current approach of solving the ODE in <small>@(@
(S, C)
@)@</small>,
is that the solution is stable as <small>@(@
S + C \rightarrow 0
@)@</small>.
(The current approach computes <small>@(@
P = C / (S + C)
@)@</small>.
</li></ol>


<br>
<br>
<big><a name="ODE Solution.Large Excess Mortality" id="ODE Solution.Large Excess Mortality">Large Excess Mortality</a></big>
<br>
If case where 
<code><i><font color="black"><span style='white-space: nowrap'>rate_case</span></font></i></code>
 is
<a href="option_table.htm#rate_case.iota_pos_rho_zero" target="_top"><span style='white-space: nowrap'>iota_pos_rho_zero</span></a>

corresponds to
<code><font color="blue">dev::eigen_ode2::Method::Case Three</font></code> in the ODE solver.
If excess mortality <small>@(@
\chi
@)@</small> is unreasonably large,
this can result in exponential overflow and infinity or nan.
It is possible to redo the calculations in case three to properly
handle this condition.

<br>
<br>
<b><big><a name="csv2db Command" id="csv2db Command">csv2db Command</a></big></b>
<br>
The following is a wish list for extending the csv2db command.
This command is only an <a href="csv2db_command.htm#Example" target="_top"><span style='white-space: nowrap'>example</span></a>

intended to help user's get started using dismod_at.

<br>
<br>
<big><a name="csv2db Command.Covariate Multipliers" id="csv2db Command.Covariate Multipliers">Covariate Multipliers</a></big>
<br>
Extend <a href="csv2db_command.htm" target="_top"><span style='white-space: nowrap'>csv2db_command</span></a>
 to include
<a href="avg_integrand.htm#Rate Functions.Rate Covariate Multiplier, alpha_jk" target="_top"><span style='white-space: nowrap'>rate&nbsp;covariate&nbsp;multipliers</span></a>
 and
<a href="avg_integrand.htm#Measurement Value Covariates.Multiplier, beta_j" target="_top"><span style='white-space: nowrap'>measurement&nbsp;value&nbsp;covariate&nbsp;multipliers</span></a>
.

<br>
<br>
<big><a name="csv2db Command.Random Effects" id="csv2db Command.Random Effects">Random Effects</a></big>
<br>
Extend <a href="csv2db_command.htm" target="_top"><span style='white-space: nowrap'>csv2db_command</span></a>
 to include
<a href="avg_integrand.htm#Rate Functions.Child Rate Effect, u_ik" target="_top"><span style='white-space: nowrap'>child&nbsp;rate&nbsp;effects</span></a>
.

<br>
<br>
<big><a name="csv2db Command.Grids" id="csv2db Command.Grids">Grids</a></big>
<br>
Extend <a href="csv2db_command.htm" target="_top"><span style='white-space: nowrap'>csv2db_command</span></a>
 to enable the user to specify
different grids for different model variables.
Currently all the variables use that same
<a href="csv2db_command.htm#mtother.Rectangular Grid" target="_top"><span style='white-space: nowrap'>grid</span></a>
 as the
mtother data.

<br>
<br>
<big><a name="csv2db Command.Value Priors" id="csv2db Command.Value Priors">Value Priors</a></big>
<br>
Extend <a href="csv2db_command.htm" target="_top"><span style='white-space: nowrap'>csv2db_command</span></a>
 to define a specific
<a href="prior_table.htm" target="_top"><span style='white-space: nowrap'>prior</span></a>
 for the value of each
<a href="model_variables.htm" target="_top"><span style='white-space: nowrap'>model&nbsp;variables</span></a>
.
For example, this would enable one to specify limits, or a specific value,
for a model variable.

<br>
<br>
<big><a name="csv2db Command.Difference Priors" id="csv2db Command.Difference Priors">Difference Priors</a></big>
<br>
Extend <a href="csv2db_command.htm" target="_top"><span style='white-space: nowrap'>csv2db_command</span></a>
 to define a specific
<a href="prior_table.htm" target="_top"><span style='white-space: nowrap'>prior</span></a>
 for the differences of the
<a href="model_variables.htm" target="_top"><span style='white-space: nowrap'>model&nbsp;variables</span></a>
; i.e.,
the amount of smoothing.

<br>
<br>
<big><a name="csv2db Command.Sample" id="csv2db Command.Sample">Sample</a></big>
<br>
Extend <a href="csv2db_command.htm" target="_top"><span style='white-space: nowrap'>csv2db_command</span></a>
 to define the
<a href="sample_table.htm" target="_top"><span style='white-space: nowrap'>sample_table</span></a>
.
This would enable csv2db to set up
<a href="predict_command.htm" target="_top"><span style='white-space: nowrap'>predictions</span></a>

using model variables computed by another program.

<br>
<br>
<big><a name="csv2db Command.Conditionals" id="csv2db Command.Conditionals">Conditionals</a></big>
<br>
It is now possible to use conditional expressions in the ODE solution
(CppAD this will now work properly these conditionals
and two levels of AD and revere mode).
This change would remove the need for the
<a href="option_table.htm#rate_case" target="_top"><span style='white-space: nowrap'>rate_case</span></a>
 option.
Note that this will also work with checkpointing.

<br>
<br>
<big><a name="csv2db Command.Checkpointing" id="csv2db Command.Checkpointing">Checkpointing</a></big>
<br>
It should greatly reduce memory if we use
CppAD checkpointing of an ODE that has been
extended to include derivatives with respect to parameters; see
<a href="http://www.coin-or.org/CppAD/Doc/checkpoint_extended_ode.cpp.htm" target="_top"><span style='white-space: nowrap'>checkpoint_extended_ode</span></a>
.

<br>
<br>
<b><big><a name="meas_std" id="meas_std">meas_std</a></big></b>
<br>
Currently the data table
<a href="data_table.htm#meas_std" target="_top"><span style='white-space: nowrap'>meas_std</span></a>

must be specified (except for uniform density).
Perhaps we should allow for this standard deviation to be
<code><font color="blue">null</font></code> in the case when the corresponding
<a href="data_table.htm#meas_value" target="_top"><span style='white-space: nowrap'>meas_value</span></a>
 must not be zero
and the <a href="integrand_table.htm#minimum_meas_cv" target="_top"><span style='white-space: nowrap'>minimum_meas_cv</span></a>

would be used to determine the measurement accuracy.


<br>
<br>
<b><big><a name="Command Diagrams" id="Command Diagrams">Command Diagrams</a></big></b>
<br>
It would be good to give a data flow diagram for each command
that corresponds to its inputs and outputs; i.e., to diagram
the information under the heading
<a href="data_flow.htm#Input and Output by Command" target="_top"><span style='white-space: nowrap'>inputs&nbsp;and&nbsp;outputs&nbsp;by&nbsp;command</span></a>
.

<br>
<br>
<b><big><a name="Lagrange Multipliers" id="Lagrange Multipliers">Lagrange Multipliers</a></big></b>
<br>
Change the Lagrange multipliers
<a href="fit_var_table.htm#lagrange_dage" target="_top"><span style='white-space: nowrap'>lagrange_dage</span></a>
 (dtime) in the
fit_var table to be null when there is no corresponding age (time) different;
i.e., at the maximum age (time).


<br>
<br>
<b><big><a name="Documentation" id="Documentation">Documentation</a></big></b>


<br>
<br>
<big><a name="Documentation.Real World Example" id="Documentation.Real World Example">Real World Example</a></big>
<br>
It would be good to include a real world example.
Since this is an open source program, we would need a data set
that could be made distributed freely without any restriction on its use.

<br>
<br>
<big><a name="Documentation.User Examples" id="Documentation.User Examples">User Examples</a></big>
<br>
The <a href="user.htm" target="_top"><span style='white-space: nowrap'>user</span></a>
 examples before
<a href="user_change_grid.py.htm" target="_top"><span style='white-space: nowrap'>user_change_grid.py</span></a>
 have a discussion at the top of each example.
Add a discussion for the rest of the user examples.

<br>
<br>
<b><big><a name="Sampling Random Effects" id="Sampling Random Effects">Sampling Random Effects</a></big></b>
<br>
It is not expected that the
<a href="sample_command.htm#method.asymptotic" target="_top"><span style='white-space: nowrap'>asymptotic</span></a>
 statistics for the
random effects will always be accurate
(due to insufficient data for individual random effects).
One could use multiple asymptotic random effects samples as a proposal
density for a Metropolis algorithm to get better sampling of these variables.

<br>
<br>
<b><big><a name="Random Starting Point" id="Random Starting Point">Random Starting Point</a></big></b>
<br>
Have an option to start at a random point from the prior for the fixed effects
(instead of the mean of the fixed effects).
This would better detect local minima and represent solution uncertainty.

<br>
<br>
<b><big><a name="Tracing Optimization" id="Tracing Optimization">Tracing Optimization</a></big></b>
<br>
Add options to specify the file name for the optimizer trace
at both the fixed and random effects levels.

<br>
<br>
<b><big><a name="Windows Install" id="Windows Install">Windows Install</a></big></b>
<br>
Make and test a set of Windows install instructions for <code><font color="blue">dismod_at</font></code>.


<hr>Input File: omh/wish_list.omh

</body>
</html>
