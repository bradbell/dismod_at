<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Print Run and Check a System Command</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Print Run and Check a System Command">
<meta name="keywords" id="keywords" content=" ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_system_command_prc_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://bradbell.github.io/dismod_at" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="sql_command.htm" target="_top">Prev</a>
</td><td><a href="unicode_tuple.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>dismod_at</option>
<option>python</option>
<option>system_command_prc</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_dismod_at_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_python_htm.js'></script>
</td>
<td>system_command_prc</td>
</tr></table><br>
@(@\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@ 



<b>This is dismod_at-20221105 documentation:</b> Here is a link to its
<a href="https://dismod-at.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Print Run and Check a System Command</big></big></b></center>

<br><a href="system_command_prc.htm#Syntax" target="_top">Syntax</a>
<br><a href="system_command_prc.htm#Purpose" target="_top">Purpose</a>
<br><a href="system_command_prc.htm#command" target="_top">command</a>
<br><a href="system_command_prc.htm#print_command" target="_top">print_command</a>
<br><a href="system_command_prc.htm#return_stdout" target="_top">return_stdout</a>
<br><a href="system_command_prc.htm#return_stderr" target="_top">return_stderr</a>
<br><a href="system_command_prc.htm#file_stdout" target="_top">file_stdout</a>
<br><a href="system_command_prc.htm#file_stderr" target="_top">file_stderr</a>
<br><a href="system_command_prc.htm#write_command" target="_top">write_command</a>
<br><a href="system_command_prc.htm#result" target="_top">result</a>
<br><a href="system_command_prc.htm#Example" target="_top">Example</a>
<br><br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<pre><tt>
<i><font color="#9A1900"># result = system_command_prc(</font></i>
   command                <font color="#990000">,</font>
   print_command  <font color="#990000">=</font> True  <font color="#990000">,</font>
   return_stdout  <font color="#990000">=</font> False <font color="#990000">,</font>
   return_stderr  <font color="#990000">=</font> False <font color="#990000">,</font>
   file_stdout    <font color="#990000">=</font> None  <font color="#990000">,</font>
   file_stderr    <font color="#990000">=</font> None  <font color="#990000">,</font>
   write_command  <font color="#990000">=</font> False <font color="#990000">,</font>
<i><font color="#9A1900"># )</font></i></tt></pre>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This routine provides variations on the following steps:
<ol type="1"><li>
Print the system command as it would appear in the shell; i.e.,
with arguments separated by spaces.
</li><li>

Run the system command and wait for it to complete.
</li><li>

Check the integer value returned by the system command.
If it is non-zero, an assert exception is raised with
stderr as the message in the exception.
</li><li>

Return the contents of standard out as a python string.
</li></ol>


<br>
<br>
<b><big><a name="command" id="command">command</a></big></b>
<br>
is a <code><font color="blue">list</font></code> with <code><font color="blue">str</font></code> elements. The first element is the
program to execute and the other elements are arguments to the program.

<br>
<br>
<b><big><a name="print_command" id="print_command">print_command</a></big></b>
<br>
If this argument is true (false) the command will (will not) be printed
before it is executed.

<br>
<br>
<b><big><a name="return_stdout" id="return_stdout">return_stdout</a></big></b>
<br>
If this argument is true, the command's standard output will be returned.
If this argument is false and 
<code><i><font color="black"><span style='white-space: nowrap'>file_stdout</span></font></i></code>
 is not None,
standard error will be written to a file during the command execution.
Otherwise, standard output will be printed during the command execution.

<br>
<br>
<b><big><a name="return_stderr" id="return_stderr">return_stderr</a></big></b>
<br>
If this argument is true, the command's standard error will be returned.
If this argument is false and 
<code><i><font color="black"><span style='white-space: nowrap'>file_stderr</span></font></i></code>
 is not None,
standard error will be written to a file during the command execution.
Otherwise, if an error occurs, an assertion is generated with
the commands standard error as the corresponding message.

<br>
<br>
<b><big><a name="file_stdout" id="file_stdout">file_stdout</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>return_stdout</span></font></i></code>
 is true, this argument must be None.
If this argument is not None, it is a file object that is opened for writing
and standard output will be written to this file.

<br>
<br>
<b><big><a name="file_stderr" id="file_stderr">file_stderr</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>return_stderr</span></font></i></code>
 is true, this argument must be None.
If this argument is not None, it is a file object that is opened for writing
and standard error will be written to this file.

<br>
<br>
<b><big><a name="write_command" id="write_command">write_command</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>write_command</span></font></i></code>
 is true (false) the command will
(will not) be written to 
<code><i><font color="black"><span style='white-space: nowrap'>file_stdout</span></font></i></code>
.
If 
<code><i><font color="black"><span style='white-space: nowrap'>file_stdout</span></font></i></code>
 is None, 
<code><i><font color="black"><span style='white-space: nowrap'>write_command</span></font></i></code>
 must be false.

<br>
<br>
<b><big><a name="result" id="result">result</a></big></b>

<ol type="1"><li>
If 
<code><i><font color="black"><span style='white-space: nowrap'>return_stdout</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>return&nbsp;stderr</span></font></i></code>
 are both false,

<code><i><font color="black"><span style='white-space: nowrap'>result</span></font></i></code>
 is <code><font color="blue">None</font></code>.
</li><li>

If 
<code><i><font color="black"><span style='white-space: nowrap'>return_stdout</span></font></i></code>
 is true and 
<code><i><font color="black"><span style='white-space: nowrap'>return_stderr</span></font></i></code>
 is false,

<code><i><font color="black"><span style='white-space: nowrap'>result</span></font></i></code>
 is a <code><font color="blue">str</font></code> with the contents of standard output.
</li><li>

If 
<code><i><font color="black"><span style='white-space: nowrap'>return_stderr</span></font></i></code>
 is true and 
<code><i><font color="black"><span style='white-space: nowrap'>return_stdout</span></font></i></code>
 is false,

<code><i><font color="black"><span style='white-space: nowrap'>result.stderr</span></font></i></code>

is an <code><font color="blue">str</font></code> with the contents of standard error,
and 
<code><i><font color="black"><span style='white-space: nowrap'>result.returncode</span></font></i></code>

is an <code><font color="blue">int</font></code> with the command's return code..
</li><li>

If both 
<code><i><font color="black"><span style='white-space: nowrap'>return_stderr</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>return_stdout</span></font></i></code>
 are true,

<code><i><font color="black"><span style='white-space: nowrap'>result.stderr</span></font></i></code>

is an <code><font color="blue">str</font></code> with the contents of standard error,

<code><i><font color="black"><span style='white-space: nowrap'>result.stdout</span></font></i></code>

is an <code><font color="blue">str</font></code> with the contents of standard output,
and 
<code><i><font color="black"><span style='white-space: nowrap'>result.returncode</span></font></i></code>

is an <code><font color="blue">int</font></code> with the command's return code..
</li></ol>



<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
Many of the <a href="user_example.htm" target="_top"><span style='white-space: nowrap'>user_example</span></a>
 examples use this utility.


<hr>Input File: python/dismod_at/system_command_prc.py

</body>
</html>
